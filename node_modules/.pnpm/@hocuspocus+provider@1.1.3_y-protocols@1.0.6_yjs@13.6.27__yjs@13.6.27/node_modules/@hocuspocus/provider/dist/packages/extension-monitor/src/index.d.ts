/// <reference types="node" />
import { Extension, onChangePayload, onConfigurePayload, onLoadDocumentPayload, onDisconnectPayload, onRequestPayload, onUpgradePayload, connectedPayload } from '@hocuspocus/server';
import { IncomingMessage, ServerResponse } from 'http';
import WebSocket from 'ws';
import { Storage } from './Storage';
import { Dashboard } from './Dashboard';
import { Collector } from './Collector';
export interface Configuration {
    dashboardPath: string;
    enableDashboard: boolean;
    metricsInterval: number;
    osMetricsInterval: number;
    password: string | undefined;
    port: number | undefined;
    user: string | undefined;
}
export declare class Monitor implements Extension {
    configuration: Configuration;
    storage: Storage;
    collector: Collector;
    dashboard?: Dashboard;
    /**
     * Constructor
     */
    constructor(configuration?: Partial<Configuration>);
    private collectOsMetrics;
    private collectConnectionMetrics;
    private cleanMetrics;
    handleRequest(request: IncomingMessage, response: ServerResponse): boolean | undefined;
    handleConnection(websocket: WebSocket, request: IncomingMessage): void | undefined;
    onRequest({ request, response }: onRequestPayload): Promise<void>;
    onUpgrade({ request, socket, head }: onUpgradePayload): Promise<void>;
    connected(data: connectedPayload): Promise<void>;
    onDisconnect(data: onDisconnectPayload): Promise<void>;
    onLoadDocument(data: onLoadDocumentPayload): Promise<void>;
    onChange(data: onChangePayload): Promise<void>;
    onConfigure(data: onConfigurePayload): Promise<void>;
}

import { Awareness } from 'y-protocols/awareness';
import * as Y from 'yjs';
import { Encoder } from 'lib0/encoding';
import type { Event, CloseEvent, MessageEvent } from 'ws';
import { AuthenticationMessage } from './OutgoingMessages/AuthenticationMessage';
import { AwarenessMessage } from './OutgoingMessages/AwarenessMessage';
import { QueryAwarenessMessage } from './OutgoingMessages/QueryAwarenessMessage';
import { SyncStepOneMessage } from './OutgoingMessages/SyncStepOneMessage';
import { SyncStepTwoMessage } from './OutgoingMessages/SyncStepTwoMessage';
import { UpdateMessage } from './OutgoingMessages/UpdateMessage';
import { IncomingMessage } from './IncomingMessage';
import { OutgoingMessage } from './OutgoingMessage';
export declare enum MessageType {
    Sync = 0,
    Awareness = 1,
    Auth = 2,
    QueryAwareness = 3,
    Stateless = 5
}
export declare enum WebSocketStatus {
    Connecting = "connecting",
    Connected = "connected",
    Disconnected = "disconnected"
}
export interface OutgoingMessageInterface {
    encoder: Encoder;
    type?: MessageType;
}
export interface OutgoingMessageArguments {
    token: string;
    document: Y.Doc;
    awareness: Awareness;
    clients: number[];
    states: Map<number, {
        [key: string]: any;
    }>;
    update: any;
    payload: string;
    encoder: Encoder;
}
export interface Constructable<T> {
    new (...args: any): T;
}
export declare type ConstructableOutgoingMessage = Constructable<AuthenticationMessage> | Constructable<AwarenessMessage> | Constructable<QueryAwarenessMessage> | Constructable<SyncStepOneMessage> | Constructable<SyncStepTwoMessage> | Constructable<UpdateMessage>;
export declare type onAuthenticationFailedParameters = {
    reason: string;
};
export declare type onOpenParameters = {
    event: Event;
};
export declare type onMessageParameters = {
    event: MessageEvent;
    message: IncomingMessage;
};
export declare type onOutgoingMessageParameters = {
    message: OutgoingMessage;
};
export declare type onStatusParameters = {
    status: WebSocketStatus;
};
export declare type onSyncedParameters = {
    state: boolean;
};
export declare type onDisconnectParameters = {
    event: CloseEvent;
};
export declare type onCloseParameters = {
    event: CloseEvent;
};
export declare type onAwarenessUpdateParameters = {
    states: StatesArray;
};
export declare type onAwarenessChangeParameters = {
    states: StatesArray;
};
export declare type onStatelessParameters = {
    payload: string;
};
export declare type StatesArray = {
    clientId: number;
    [key: string | number]: any;
}[];

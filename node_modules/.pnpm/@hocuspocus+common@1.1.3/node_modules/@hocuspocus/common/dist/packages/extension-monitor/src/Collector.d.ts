/// <reference types="node" />
import { Configuration, onConnectPayload, onDisconnectPayload, onLoadDocumentPayload, onChangePayload } from '@hocuspocus/server';
export declare class Collector {
    serverConfiguration: Partial<Configuration>;
    version: string;
    connections: {};
    messages: {};
    messageCounter: number;
    memory(): Promise<{
        free: number;
        total: number;
        usage: number;
    }>;
    cpu(): Promise<{
        count: number;
        model: string;
        usage: number;
    }>;
    connect(data: onConnectPayload): {
        action: string;
        documentName: string;
        socketId: string;
    };
    disconnect(data: onDisconnectPayload): {
        action: string;
        documentName: string;
        socketId: string;
    };
    connectionCount(): {
        count: string | number;
    };
    createDocument(data: onLoadDocumentPayload): {
        action: string;
        document: any;
        documentName: string;
        socketId: string;
    };
    changeDocument(data: onChangePayload): {
        action: string;
        document: any;
        documentName: string;
        socketId: string;
    };
    messageCount(): {
        count: number;
    };
    documentCount(): {
        count: number;
    };
    documents(): {};
    info(): Promise<{
        configuration: Partial<Configuration>;
        ipAddress: string | null;
        nodeVersion: string;
        platform: NodeJS.Platform;
        started: string;
        version: string;
    }>;
    private getIpAddress;
    private static readableYDoc;
}

{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/createChainableState.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/CommandManager.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/EventEmitter.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getExtensionField.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/splitExtensions.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getAttributesFromExtensions.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getNodeType.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/mergeAttributes.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getRenderedAttributes.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/isFunction.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/callOrReturn.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/isEmptyObject.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/fromString.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/injectExtensionAttributesToParseRule.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getSchemaByResolvedExtensions.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getSchemaTypeByName.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/isExtensionRulesEnabled.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getTextContentFromNodes.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/isRegExp.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/InputRule.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/isNumber.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/PasteRule.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/findDuplicates.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/ExtensionManager.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/isPlainObject.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/mergeDeep.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/Extension.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getTextBetween.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getTextSerializersFromSchema.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/extensions/clipboardTextSerializer.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/blur.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/clearContent.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/clearNodes.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/command.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/createParagraphNear.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/deleteNode.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/deleteRange.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/deleteSelection.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/enter.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/exitCode.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/objectIncludes.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getMarkRange.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getMarkType.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/extendMarkRange.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/first.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/isTextSelection.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/minMax.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/resolveFocusPosition.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/isiOS.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/focus.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/forEach.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/insertContent.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/elementFromString.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/createNodeFromContent.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/selectionToInsertionEnd.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/insertContentAt.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/joinBackward.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/joinForward.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/isMacOS.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/keyboardShortcut.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/isNodeActive.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/lift.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/liftEmptyBlock.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/liftListItem.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/newlineInCode.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getSchemaTypeNameByName.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/deleteProps.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/resetAttributes.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/scrollIntoView.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/selectAll.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/selectNodeBackward.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/selectNodeForward.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/selectParentNode.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/selectTextblockEnd.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/selectTextblockStart.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/createDocument.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/setContent.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/combineTransactionSteps.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/defaultBlockAt.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/findChildren.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/findChildrenInRange.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/findParentNodeClosestToPos.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/findParentNode.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getHTMLFromFragment.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getSchema.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/generateHTML.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/generateJSON.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getText.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/generateText.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getMarkAttributes.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getNodeAttributes.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getAttributes.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/removeDuplicates.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getChangedRanges.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getDebugJSON.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getMarksBetween.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/isMarkActive.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/isActive.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/isList.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/isNodeEmpty.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/isNodeSelection.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/posToDOMRect.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/setMark.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/setMeta.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/setNode.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/setNodeSelection.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/setTextSelection.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/sinkListItem.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/helpers/getSplittedAttributes.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/splitBlock.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/splitListItem.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/toggleList.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/toggleMark.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/toggleNode.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/toggleWrap.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/undoInputRule.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/unsetAllMarks.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/unsetMark.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/updateAttributes.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/wrapIn.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/commands/wrapInList.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/extensions/commands.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/extensions/editable.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/extensions/focusEvents.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/extensions/keymap.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/extensions/tabindex.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/style.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/createStyleTag.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/Editor.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/inputRules/markInputRule.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/inputRules/nodeInputRule.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/inputRules/textblockTypeInputRule.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/inputRules/textInputRule.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/inputRules/wrappingInputRule.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/Mark.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/Node.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/NodeView.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/pasteRules/markPasteRule.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/utilities/escapeForRegEx.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/pasteRules/nodePasteRule.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/pasteRules/textPasteRule.ts", "../../../../node_modules/.pnpm/@tiptap+core@2.0.0-beta.202/node_modules/@tiptap/core/src/Tracker.ts"],
  "sourcesContent": ["import { EditorState, Transaction } from 'prosemirror-state'\n\nexport function createChainableState(config: {\n  transaction: Transaction,\n  state: EditorState,\n}): EditorState {\n  const { state, transaction } = config\n  let { selection } = transaction\n  let { doc } = transaction\n  let { storedMarks } = transaction\n\n  return {\n    ...state,\n    apply: state.apply.bind(state),\n    applyTransaction: state.applyTransaction.bind(state),\n    filterTransaction: state.filterTransaction,\n    plugins: state.plugins,\n    schema: state.schema,\n    reconfigure: state.reconfigure.bind(state),\n    toJSON: state.toJSON.bind(state),\n    get storedMarks() {\n      return storedMarks\n    },\n    get selection() {\n      return selection\n    },\n    get doc() {\n      return doc\n    },\n    get tr() {\n      selection = transaction.selection\n      doc = transaction.doc\n      storedMarks = transaction.storedMarks\n\n      return transaction\n    },\n  }\n}\n", "import { EditorState, Transaction } from 'prosemirror-state'\n\nimport { Editor } from './Editor'\nimport { createChainableState } from './helpers/createChainableState'\nimport {\n  AnyCommands,\n  CanCommands,\n  ChainedCommands,\n  CommandProps,\n  SingleCommands,\n} from './types'\n\nexport class CommandManager {\n\n  editor: Editor\n\n  rawCommands: AnyCommands\n\n  customState?: EditorState\n\n  constructor(props: {\n    editor: Editor,\n    state?: EditorState,\n  }) {\n    this.editor = props.editor\n    this.rawCommands = this.editor.extensionManager.commands\n    this.customState = props.state\n  }\n\n  get hasCustomState(): boolean {\n    return !!this.customState\n  }\n\n  get state(): EditorState {\n    return this.customState || this.editor.state\n  }\n\n  get commands(): SingleCommands {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n    const { tr } = state\n    const props = this.buildProps(tr)\n\n    return Object.fromEntries(Object\n      .entries(rawCommands)\n      .map(([name, command]) => {\n        const method = (...args: any[]) => {\n          const callback = command(...args)(props)\n\n          if (!tr.getMeta('preventDispatch') && !this.hasCustomState) {\n            view.dispatch(tr)\n          }\n\n          return callback\n        }\n\n        return [name, method]\n      })) as unknown as SingleCommands\n  }\n\n  get chain(): () => ChainedCommands {\n    return () => this.createChain()\n  }\n\n  get can(): () => CanCommands {\n    return () => this.createCan()\n  }\n\n  public createChain(startTr?: Transaction, shouldDispatch = true): ChainedCommands {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n    const callbacks: boolean[] = []\n    const hasStartTransaction = !!startTr\n    const tr = startTr || state.tr\n\n    const run = () => {\n      if (\n        !hasStartTransaction\n        && shouldDispatch\n        && !tr.getMeta('preventDispatch')\n        && !this.hasCustomState\n      ) {\n        view.dispatch(tr)\n      }\n\n      return callbacks.every(callback => callback === true)\n    }\n\n    const chain = {\n      ...Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n        const chainedCommand = (...args: never[]) => {\n          const props = this.buildProps(tr, shouldDispatch)\n          const callback = command(...args)(props)\n\n          callbacks.push(callback)\n\n          return chain\n        }\n\n        return [name, chainedCommand]\n      })),\n      run,\n    } as unknown as ChainedCommands\n\n    return chain\n  }\n\n  public createCan(startTr?: Transaction): CanCommands {\n    const { rawCommands, state } = this\n    const dispatch = false\n    const tr = startTr || state.tr\n    const props = this.buildProps(tr, dispatch)\n    const formattedCommands = Object.fromEntries(Object\n      .entries(rawCommands)\n      .map(([name, command]) => {\n        return [name, (...args: never[]) => command(...args)({ ...props, dispatch: undefined })]\n      })) as unknown as SingleCommands\n\n    return {\n      ...formattedCommands,\n      chain: () => this.createChain(tr, dispatch),\n    } as CanCommands\n  }\n\n  public buildProps(tr: Transaction, shouldDispatch = true): CommandProps {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n\n    if (state.storedMarks) {\n      tr.setStoredMarks(state.storedMarks)\n    }\n\n    const props: CommandProps = {\n      tr,\n      editor,\n      view,\n      state: createChainableState({\n        state,\n        transaction: tr,\n      }),\n      dispatch: shouldDispatch\n        ? () => undefined\n        : undefined,\n      chain: () => this.createChain(tr),\n      can: () => this.createCan(tr),\n      get commands() {\n        return Object.fromEntries(Object\n          .entries(rawCommands)\n          .map(([name, command]) => {\n            return [name, (...args: never[]) => command(...args)(props)]\n          })) as unknown as SingleCommands\n      },\n    }\n\n    return props\n  }\n\n}\n", "type StringKeyOf<T> = Extract<keyof T, string>\ntype CallbackType<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = T[EventName] extends any[] ? T[EventName] : [T[EventName]]\ntype CallbackFunction<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = (...props: CallbackType<T, EventName>) => any\n\nexport class EventEmitter<T extends Record<string, any>> {\n\n  private callbacks: { [key: string]: Function[] } = {}\n\n  public on<EventName extends StringKeyOf<T>>(event: EventName, fn: CallbackFunction<T, EventName>): this {\n    if (!this.callbacks[event]) {\n      this.callbacks[event] = []\n    }\n\n    this.callbacks[event].push(fn)\n\n    return this\n  }\n\n  protected emit<EventName extends StringKeyOf<T>>(event: EventName, ...args: CallbackType<T, EventName>): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      callbacks.forEach(callback => callback.apply(this, args))\n    }\n\n    return this\n  }\n\n  public off<EventName extends StringKeyOf<T>>(event: EventName, fn?: CallbackFunction<T, EventName>): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      if (fn) {\n        this.callbacks[event] = callbacks.filter(callback => callback !== fn)\n      } else {\n        delete this.callbacks[event]\n      }\n    }\n\n    return this\n  }\n\n  protected removeAllListeners(): void {\n    this.callbacks = {}\n  }\n}\n", "import { AnyExtension, MaybeThisParameterType, RemoveThis } from '../types'\n\nexport function getExtensionField<T = any>(\n  extension: AnyExtension,\n  field: string,\n  context?: Omit<MaybeThisParameterType<T>, 'parent'>,\n): RemoveThis<T> {\n\n  if (extension.config[field] === undefined && extension.parent) {\n    return getExtensionField(extension.parent, field, context)\n  }\n\n  if (typeof extension.config[field] === 'function') {\n    const value = extension.config[field].bind({\n      ...context,\n      parent: extension.parent\n        ? getExtensionField(extension.parent, field, context)\n        : null,\n    })\n\n    return value\n  }\n\n  return extension.config[field]\n}\n", "import { Extension } from '../Extension'\nimport { Mark } from '../Mark'\nimport { Node } from '../Node'\nimport { Extensions } from '../types'\n\nexport function splitExtensions(extensions: Extensions) {\n  const baseExtensions = extensions.filter(extension => extension.type === 'extension') as Extension[]\n  const nodeExtensions = extensions.filter(extension => extension.type === 'node') as Node[]\n  const markExtensions = extensions.filter(extension => extension.type === 'mark') as Mark[]\n\n  return {\n    baseExtensions,\n    nodeExtensions,\n    markExtensions,\n  }\n}\n", "import { MarkConfig, NodeConfig } from '..'\nimport {\n  AnyConfig,\n  Attribute,\n  Attributes,\n  ExtensionAttribute,\n  Extensions,\n  GlobalAttributes,\n} from '../types'\nimport { getExtensionField } from './getExtensionField'\nimport { splitExtensions } from './splitExtensions'\n\n/**\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\n * @param extensions List of extensions\n */\nexport function getAttributesFromExtensions(extensions: Extensions): ExtensionAttribute[] {\n  const extensionAttributes: ExtensionAttribute[] = []\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions]\n  const defaultAttribute: Required<Attribute> = {\n    default: null,\n    rendered: true,\n    renderHTML: null,\n    parseHTML: null,\n    keepOnSplit: true,\n    isRequired: false,\n  }\n\n  extensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const addGlobalAttributes = getExtensionField<AnyConfig['addGlobalAttributes']>(\n      extension,\n      'addGlobalAttributes',\n      context,\n    )\n\n    if (!addGlobalAttributes) {\n      return\n    }\n\n    // TODO: remove `as GlobalAttributes`\n    const globalAttributes = addGlobalAttributes() as GlobalAttributes\n\n    globalAttributes.forEach(globalAttribute => {\n      globalAttribute.types.forEach(type => {\n        Object\n          .entries(globalAttribute.attributes)\n          .forEach(([name, attribute]) => {\n            extensionAttributes.push({\n              type,\n              name,\n              attribute: {\n                ...defaultAttribute,\n                ...attribute,\n              },\n            })\n          })\n      })\n    })\n  })\n\n  nodeAndMarkExtensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const addAttributes = getExtensionField<NodeConfig['addAttributes'] | MarkConfig['addAttributes']>(\n      extension,\n      'addAttributes',\n      context,\n    )\n\n    if (!addAttributes) {\n      return\n    }\n\n    // TODO: remove `as Attributes`\n    const attributes = addAttributes() as Attributes\n\n    Object\n      .entries(attributes)\n      .forEach(([name, attribute]) => {\n        const mergedAttr = {\n          ...defaultAttribute,\n          ...attribute,\n        }\n\n        if (attribute?.isRequired && attribute?.default === undefined) {\n          delete mergedAttr.default\n        }\n\n        extensionAttributes.push({\n          type: extension.name,\n          name,\n          attribute: mergedAttr,\n        })\n      })\n  })\n\n  return extensionAttributes\n}\n", "import { NodeType, Schema } from 'prosemirror-model'\n\nexport function getNodeType(nameOrType: string | NodeType, schema: Schema): NodeType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.nodes[nameOrType]) {\n      throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`)\n    }\n\n    return schema.nodes[nameOrType]\n  }\n\n  return nameOrType\n}\n", "export function mergeAttributes(...objects: Record<string, any>[]): Record<string, any> {\n  return objects\n    .filter(item => !!item)\n    .reduce((items, item) => {\n      const mergedAttributes = { ...items }\n\n      Object.entries(item).forEach(([key, value]) => {\n        const exists = mergedAttributes[key]\n\n        if (!exists) {\n          mergedAttributes[key] = value\n\n          return\n        }\n\n        if (key === 'class') {\n          mergedAttributes[key] = [mergedAttributes[key], value].join(' ')\n        } else if (key === 'style') {\n          mergedAttributes[key] = [mergedAttributes[key], value].join('; ')\n        } else {\n          mergedAttributes[key] = value\n        }\n      })\n\n      return mergedAttributes\n    }, {})\n}\n", "import { Mark, Node } from 'prosemirror-model'\n\nimport { ExtensionAttribute } from '../types'\nimport { mergeAttributes } from '../utilities/mergeAttributes'\n\nexport function getRenderedAttributes(nodeOrMark: Node | Mark, extensionAttributes: ExtensionAttribute[]): Record<string, any> {\n  return extensionAttributes\n    .filter(item => item.attribute.rendered)\n    .map(item => {\n      if (!item.attribute.renderHTML) {\n        return {\n          [item.name]: nodeOrMark.attrs[item.name],\n        }\n      }\n\n      return item.attribute.renderHTML(nodeOrMark.attrs) || {}\n    })\n    .reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {})\n}\n", "export function isFunction(value: any): value is Function {\n  return typeof value === 'function'\n}\n", "import { MaybeReturnType } from '../types'\nimport { isFunction } from './isFunction'\n\n/**\n * Optionally calls `value` as a function.\n * Otherwise it is returned directly.\n * @param value Function or any value.\n * @param context Optional context to bind to function.\n * @param props Optional props to pass to function.\n */\nexport function callOrReturn<T>(value: T, context: any = undefined, ...props: any[]): MaybeReturnType<T> {\n  if (isFunction(value)) {\n    if (context) {\n      return value.bind(context)(...props)\n    }\n\n    return value(...props)\n  }\n\n  return value as MaybeReturnType<T>\n}\n", "export function isEmptyObject(value = {}): boolean {\n  return Object.keys(value).length === 0 && value.constructor === Object\n}\n", "export function fromString(value: any): any {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n    return Number(value)\n  }\n\n  if (value === 'true') {\n    return true\n  }\n\n  if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n", "import { ParseRule } from 'prosemirror-model'\n\nimport { ExtensionAttribute } from '../types'\nimport { fromString } from '../utilities/fromString'\n\n/**\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\n * Cancels when `getAttrs` returned `false`.\n * @param parseRule ProseMirror ParseRule\n * @param extensionAttributes List of attributes to inject\n */\nexport function injectExtensionAttributesToParseRule(parseRule: ParseRule, extensionAttributes: ExtensionAttribute[]): ParseRule {\n  if (parseRule.style) {\n    return parseRule\n  }\n\n  return {\n    ...parseRule,\n    getAttrs: node => {\n      const oldAttributes = parseRule.getAttrs\n        ? parseRule.getAttrs(node)\n        : parseRule.attrs\n\n      if (oldAttributes === false) {\n        return false\n      }\n\n      const newAttributes = extensionAttributes.reduce((items, item) => {\n        const value = item.attribute.parseHTML\n          ? item.attribute.parseHTML(node as HTMLElement)\n          : fromString((node as HTMLElement).getAttribute(item.name))\n\n        if (value === null || value === undefined) {\n          return items\n        }\n\n        return {\n          ...items,\n          [item.name]: value,\n        }\n      }, {})\n\n      return { ...oldAttributes, ...newAttributes }\n    },\n  }\n}\n", "import { MarkSpec, NodeSpec, Schema } from 'prosemirror-model'\n\nimport { MarkConfig, NodeConfig } from '..'\nimport { AnyConfig, Extensions } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\nimport { isEmptyObject } from '../utilities/isEmptyObject'\nimport { getAttributesFromExtensions } from './getAttributesFromExtensions'\nimport { getExtensionField } from './getExtensionField'\nimport { getRenderedAttributes } from './getRenderedAttributes'\nimport { injectExtensionAttributesToParseRule } from './injectExtensionAttributesToParseRule'\nimport { splitExtensions } from './splitExtensions'\n\nfunction cleanUpSchemaItem<T>(data: T) {\n  return Object.fromEntries(Object.entries(data).filter(([key, value]) => {\n    if (key === 'attrs' && isEmptyObject(value)) {\n      return false\n    }\n\n    return value !== null && value !== undefined\n  })) as T\n}\n\nexport function getSchemaByResolvedExtensions(extensions: Extensions): Schema {\n  const allAttributes = getAttributesFromExtensions(extensions)\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const topNode = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))?.name\n\n  const nodes = Object.fromEntries(nodeExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name)\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const extraNodeFields = extensions.reduce((fields, e) => {\n      const extendNodeSchema = getExtensionField<AnyConfig['extendNodeSchema']>(\n        e,\n        'extendNodeSchema',\n        context,\n      )\n\n      return {\n        ...fields,\n        ...(extendNodeSchema ? extendNodeSchema(extension) : {}),\n      }\n    }, {})\n\n    const schema: NodeSpec = cleanUpSchemaItem({\n      ...extraNodeFields,\n      content: callOrReturn(getExtensionField<NodeConfig['content']>(extension, 'content', context)),\n      marks: callOrReturn(getExtensionField<NodeConfig['marks']>(extension, 'marks', context)),\n      group: callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context)),\n      inline: callOrReturn(getExtensionField<NodeConfig['inline']>(extension, 'inline', context)),\n      atom: callOrReturn(getExtensionField<NodeConfig['atom']>(extension, 'atom', context)),\n      selectable: callOrReturn(getExtensionField<NodeConfig['selectable']>(extension, 'selectable', context)),\n      draggable: callOrReturn(getExtensionField<NodeConfig['draggable']>(extension, 'draggable', context)),\n      code: callOrReturn(getExtensionField<NodeConfig['code']>(extension, 'code', context)),\n      defining: callOrReturn(getExtensionField<NodeConfig['defining']>(extension, 'defining', context)),\n      isolating: callOrReturn(getExtensionField<NodeConfig['isolating']>(extension, 'isolating', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n      })),\n    })\n\n    const parseHTML = callOrReturn(getExtensionField<NodeConfig['parseHTML']>(extension, 'parseHTML', context))\n\n    if (parseHTML) {\n      schema.parseDOM = parseHTML\n        .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes))\n    }\n\n    const renderHTML = getExtensionField<NodeConfig['renderHTML']>(extension, 'renderHTML', context)\n\n    if (renderHTML) {\n      schema.toDOM = node => renderHTML({\n        node,\n        HTMLAttributes: getRenderedAttributes(node, extensionAttributes),\n      })\n    }\n\n    const renderText = getExtensionField<NodeConfig['renderText']>(extension, 'renderText', context)\n\n    if (renderText) {\n      schema.toText = renderText\n    }\n\n    return [extension.name, schema]\n  }))\n\n  const marks = Object.fromEntries(markExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name)\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const extraMarkFields = extensions.reduce((fields, e) => {\n      const extendMarkSchema = getExtensionField<AnyConfig['extendMarkSchema']>(\n        e,\n        'extendMarkSchema',\n        context,\n      )\n\n      return {\n        ...fields,\n        ...(extendMarkSchema ? extendMarkSchema(extension) : {}),\n      }\n    }, {})\n\n    const schema: MarkSpec = cleanUpSchemaItem({\n      ...extraMarkFields,\n      inclusive: callOrReturn(getExtensionField<MarkConfig['inclusive']>(extension, 'inclusive', context)),\n      excludes: callOrReturn(getExtensionField<MarkConfig['excludes']>(extension, 'excludes', context)),\n      group: callOrReturn(getExtensionField<MarkConfig['group']>(extension, 'group', context)),\n      spanning: callOrReturn(getExtensionField<MarkConfig['spanning']>(extension, 'spanning', context)),\n      code: callOrReturn(getExtensionField<MarkConfig['code']>(extension, 'code', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n      })),\n    })\n\n    const parseHTML = callOrReturn(getExtensionField<MarkConfig['parseHTML']>(extension, 'parseHTML', context))\n\n    if (parseHTML) {\n      schema.parseDOM = parseHTML\n        .map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes))\n    }\n\n    const renderHTML = getExtensionField<MarkConfig['renderHTML']>(extension, 'renderHTML', context)\n\n    if (renderHTML) {\n      schema.toDOM = mark => renderHTML({\n        mark,\n        HTMLAttributes: getRenderedAttributes(mark, extensionAttributes),\n      })\n    }\n\n    return [extension.name, schema]\n  }))\n\n  return new Schema({\n    topNode,\n    nodes,\n    marks,\n  })\n}\n", "import { MarkType, NodeType, Schema } from 'prosemirror-model'\n\nexport function getSchemaTypeByName(name: string, schema: Schema): NodeType | MarkType | null {\n  return schema.nodes[name] || schema.marks[name] || null\n}\n", "import { AnyExtension, EnableRules } from '../types'\n\nexport function isExtensionRulesEnabled(extension: AnyExtension, enabled: EnableRules): boolean {\n  if (Array.isArray(enabled)) {\n    return enabled.some(enabledExtension => {\n      const name = typeof enabledExtension === 'string'\n        ? enabledExtension\n        : enabledExtension.name\n\n      return name === extension.name\n    })\n  }\n\n  return enabled\n}\n", "import { ResolvedPos } from 'prosemirror-model'\n\nexport const getTextContentFromNodes = ($from: ResolvedPos, maxMatch = 500) => {\n  let textBefore = ''\n\n  const sliceEndPos = $from.parentOffset\n\n  $from.parent.nodesBetween(\n    Math.max(0, sliceEndPos - maxMatch),\n    sliceEndPos,\n    (node, pos, parent, index) => {\n      const chunk = node.type.spec.toText?.({\n        node, pos, parent, index,\n      }) || node.textContent || '%leaf%'\n\n      textBefore += chunk.slice(0, Math.max(0, sliceEndPos - pos))\n    },\n  )\n\n  return textBefore\n}\n", "export function isRegExp(value: any): value is RegExp {\n  return Object.prototype.toString.call(value) === '[object RegExp]'\n}\n", "import { EditorState, Plugin, TextSelection } from 'prosemirror-state'\n\nimport { CommandManager } from './CommandManager'\nimport { Editor } from './Editor'\nimport { createChainableState } from './helpers/createChainableState'\nimport { getTextContentFromNodes } from './helpers/getTextContentFromNodes'\nimport {\n  CanCommands,\n  ChainedCommands,\n  ExtendedRegExpMatchArray,\n  Range,\n  SingleCommands,\n} from './types'\nimport { isRegExp } from './utilities/isRegExp'\n\nexport type InputRuleMatch = {\n  index: number,\n  text: string,\n  replaceWith?: string,\n  match?: RegExpMatchArray,\n  data?: Record<string, any>,\n}\n\nexport type InputRuleFinder =\n  | RegExp\n  | ((text: string) => InputRuleMatch | null)\n\nexport class InputRule {\n  find: InputRuleFinder\n\n  handler: (props: {\n    state: EditorState,\n    range: Range,\n    match: ExtendedRegExpMatchArray,\n    commands: SingleCommands,\n    chain: () => ChainedCommands,\n    can: () => CanCommands,\n  }) => void | null\n\n  constructor(config: {\n    find: InputRuleFinder,\n    handler: (props: {\n      state: EditorState,\n      range: Range,\n      match: ExtendedRegExpMatchArray,\n      commands: SingleCommands,\n      chain: () => ChainedCommands,\n      can: () => CanCommands,\n    }) => void | null,\n  }) {\n    this.find = config.find\n    this.handler = config.handler\n  }\n}\n\nconst inputRuleMatcherHandler = (text: string, find: InputRuleFinder): ExtendedRegExpMatchArray | null => {\n  if (isRegExp(find)) {\n    return find.exec(text)\n  }\n\n  const inputRuleMatch = find(text)\n\n  if (!inputRuleMatch) {\n    return null\n  }\n\n  const result: ExtendedRegExpMatchArray = []\n\n  result.push(inputRuleMatch.text)\n  result.index = inputRuleMatch.index\n  result.input = text\n  result.data = inputRuleMatch.data\n\n  if (inputRuleMatch.replaceWith) {\n    if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n      console.warn('[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".')\n    }\n\n    result.push(inputRuleMatch.replaceWith)\n  }\n\n  return result\n}\n\nfunction run(config: {\n  editor: Editor,\n  from: number,\n  to: number,\n  text: string,\n  rules: InputRule[],\n  plugin: Plugin,\n}): boolean {\n  const {\n    editor,\n    from,\n    to,\n    text,\n    rules,\n    plugin,\n  } = config\n  const { view } = editor\n\n  if (view.composing) {\n    return false\n  }\n\n  const $from = view.state.doc.resolve(from)\n\n  if (\n    // check for code node\n    $from.parent.type.spec.code\n    // check for code mark\n    || !!($from.nodeBefore || $from.nodeAfter)?.marks.find(mark => mark.type.spec.code)\n  ) {\n    return false\n  }\n\n  let matched = false\n\n  const textBefore = getTextContentFromNodes($from) + text\n\n  rules.forEach(rule => {\n    if (matched) {\n      return\n    }\n\n    const match = inputRuleMatcherHandler(textBefore, rule.find)\n\n    if (!match) {\n      return\n    }\n\n    const tr = view.state.tr\n    const state = createChainableState({\n      state: view.state,\n      transaction: tr,\n    })\n    const range = {\n      from: from - (match[0].length - text.length),\n      to,\n    }\n\n    const { commands, chain, can } = new CommandManager({\n      editor,\n      state,\n    })\n\n    const handler = rule.handler({\n      state,\n      range,\n      match,\n      commands,\n      chain,\n      can,\n    })\n\n    // stop if there are no changes\n    if (handler === null || !tr.steps.length) {\n      return\n    }\n\n    // store transform as meta data\n    // so we can undo input rules within the `undoInputRules` command\n    tr.setMeta(plugin, {\n      transform: tr,\n      from,\n      to,\n      text,\n    })\n\n    view.dispatch(tr)\n    matched = true\n  })\n\n  return matched\n}\n\n/**\n * Create an input rules plugin. When enabled, it will cause text\n * input that matches any of the given rules to trigger the rule’s\n * action.\n */\nexport function inputRulesPlugin(props: { editor: Editor, rules: InputRule[] }): Plugin {\n  const { editor, rules } = props\n  const plugin = new Plugin({\n    state: {\n      init() {\n        return null\n      },\n      apply(tr, prev) {\n        const stored = tr.getMeta(plugin)\n\n        if (stored) {\n          return stored\n        }\n\n        return tr.selectionSet || tr.docChanged\n          ? null\n          : prev\n      },\n    },\n\n    props: {\n      handleTextInput(view, from, to, text) {\n        return run({\n          editor,\n          from,\n          to,\n          text,\n          rules,\n          plugin,\n        })\n      },\n\n      handleDOMEvents: {\n        compositionend: view => {\n          setTimeout(() => {\n            const { $cursor } = view.state.selection as TextSelection\n\n            if ($cursor) {\n              run({\n                editor,\n                from: $cursor.pos,\n                to: $cursor.pos,\n                text: '',\n                rules,\n                plugin,\n              })\n            }\n          })\n\n          return false\n        },\n      },\n\n      // add support for input rules to trigger on enter\n      // this is useful for example for code blocks\n      handleKeyDown(view, event) {\n        if (event.key !== 'Enter') {\n          return false\n        }\n\n        const { $cursor } = view.state.selection as TextSelection\n\n        if ($cursor) {\n          return run({\n            editor,\n            from: $cursor.pos,\n            to: $cursor.pos,\n            text: '\\n',\n            rules,\n            plugin,\n          })\n        }\n\n        return false\n      },\n    },\n\n    // @ts-ignore\n    isInputRules: true,\n  }) as Plugin\n\n  return plugin\n}\n", "export function isNumber(value: any): value is number {\n  return typeof value === 'number'\n}\n", "import { EditorState, Plugin } from 'prosemirror-state'\n\nimport { CommandManager } from './CommandManager'\nimport { Editor } from './Editor'\nimport { createChainableState } from './helpers/createChainableState'\nimport {\n  CanCommands,\n  ChainedCommands,\n  ExtendedRegExpMatchArray,\n  Range,\n  SingleCommands,\n} from './types'\nimport { isNumber } from './utilities/isNumber'\nimport { isRegExp } from './utilities/isRegExp'\n\nexport type PasteRuleMatch = {\n  index: number,\n  text: string,\n  replaceWith?: string,\n  match?: RegExpMatchArray,\n  data?: Record<string, any>,\n}\n\nexport type PasteRuleFinder =\n  | RegExp\n  | ((text: string) => PasteRuleMatch[] | null | undefined)\n\nexport class PasteRule {\n  find: PasteRuleFinder\n\n  handler: (props: {\n    state: EditorState,\n    range: Range,\n    match: ExtendedRegExpMatchArray,\n    commands: SingleCommands,\n    chain: () => ChainedCommands,\n    can: () => CanCommands,\n  }) => void | null\n\n  constructor(config: {\n    find: PasteRuleFinder,\n    handler: (props: {\n      state: EditorState,\n      range: Range,\n      match: ExtendedRegExpMatchArray,\n      commands: SingleCommands,\n      chain: () => ChainedCommands,\n      can: () => CanCommands,\n    }) => void | null,\n  }) {\n    this.find = config.find\n    this.handler = config.handler\n  }\n}\n\nconst pasteRuleMatcherHandler = (text: string, find: PasteRuleFinder): ExtendedRegExpMatchArray[] => {\n  if (isRegExp(find)) {\n    return [...text.matchAll(find)]\n  }\n\n  const matches = find(text)\n\n  if (!matches) {\n    return []\n  }\n\n  return matches.map(pasteRuleMatch => {\n    const result: ExtendedRegExpMatchArray = []\n\n    result.push(pasteRuleMatch.text)\n    result.index = pasteRuleMatch.index\n    result.input = text\n    result.data = pasteRuleMatch.data\n\n    if (pasteRuleMatch.replaceWith) {\n      if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n        console.warn('[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".')\n      }\n\n      result.push(pasteRuleMatch.replaceWith)\n    }\n\n    return result\n  })\n}\n\nfunction run(config: {\n  editor: Editor,\n  state: EditorState,\n  from: number,\n  to: number,\n  rule: PasteRule,\n}): boolean {\n  const {\n    editor,\n    state,\n    from,\n    to,\n    rule,\n  } = config\n\n  const { commands, chain, can } = new CommandManager({\n    editor,\n    state,\n  })\n\n  const handlers: (void | null)[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isTextblock || node.type.spec.code) {\n      return\n    }\n\n    const resolvedFrom = Math.max(from, pos)\n    const resolvedTo = Math.min(to, pos + node.content.size)\n    const textToMatch = node.textBetween(\n      resolvedFrom - pos,\n      resolvedTo - pos,\n      undefined,\n      '\\ufffc',\n    )\n\n    const matches = pasteRuleMatcherHandler(textToMatch, rule.find)\n\n    matches.forEach(match => {\n      if (match.index === undefined) {\n        return\n      }\n\n      const start = resolvedFrom + match.index + 1\n      const end = start + match[0].length\n      const range = {\n        from: state.tr.mapping.map(start),\n        to: state.tr.mapping.map(end),\n      }\n\n      const handler = rule.handler({\n        state,\n        range,\n        match,\n        commands,\n        chain,\n        can,\n      })\n\n      handlers.push(handler)\n    })\n  })\n\n  const success = handlers.every(handler => handler !== null)\n\n  return success\n}\n\n/**\n * Create an paste rules plugin. When enabled, it will cause pasted\n * text that matches any of the given rules to trigger the rule’s\n * action.\n */\nexport function pasteRulesPlugin(props: { editor: Editor, rules: PasteRule[] }): Plugin[] {\n  const { editor, rules } = props\n  let dragSourceElement: Element | null = null\n  let isPastedFromProseMirror = false\n  let isDroppedFromProseMirror = false\n\n  const plugins = rules.map(rule => {\n    return new Plugin({\n      // we register a global drag handler to track the current drag source element\n      view(view) {\n        const handleDragstart = (event: DragEvent) => {\n          dragSourceElement = view.dom.parentElement?.contains(event.target as Element)\n            ? view.dom.parentElement\n            : null\n        }\n\n        window.addEventListener('dragstart', handleDragstart)\n\n        return {\n          destroy() {\n            window.removeEventListener('dragstart', handleDragstart)\n          },\n        }\n      },\n\n      props: {\n        handleDOMEvents: {\n          drop: view => {\n            isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement\n\n            return false\n          },\n\n          paste: (view, event: Event) => {\n            const html = (event as ClipboardEvent).clipboardData?.getData('text/html')\n\n            isPastedFromProseMirror = !!html?.includes('data-pm-slice')\n\n            return false\n          },\n        },\n      },\n\n      appendTransaction: (transactions, oldState, state) => {\n        const transaction = transactions[0]\n        const isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror\n        const isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror\n\n        if (!isPaste && !isDrop) {\n          return\n        }\n\n        // stop if there is no changed range\n        const from = oldState.doc.content.findDiffStart(state.doc.content)\n        const to = oldState.doc.content.findDiffEnd(state.doc.content)\n\n        if (!isNumber(from) || !to || from === to.b) {\n          return\n        }\n\n        // build a chainable state\n        // so we can use a single transaction for all paste rules\n        const tr = state.tr\n        const chainableState = createChainableState({\n          state,\n          transaction: tr,\n        })\n\n        const handler = run({\n          editor,\n          state: chainableState,\n          from: Math.max(from - 1, 0),\n          to: to.b - 1,\n          rule,\n        })\n\n        // stop if there are no changes\n        if (!handler || !tr.steps.length) {\n          return\n        }\n\n        return tr\n      },\n    })\n  })\n\n  return plugins\n}\n", "export function findDuplicates(items: any[]): any[] {\n  const filtered = items.filter((el, index) => items.indexOf(el) !== index)\n\n  return [...new Set(filtered)]\n}\n", "import { keymap } from 'prosemirror-keymap'\nimport { Node as ProsemirrorNode, Schema } from 'prosemirror-model'\nimport { Plugin } from 'prosemirror-state'\nimport { Decoration, EditorView } from 'prosemirror-view'\n\nimport { Mark, NodeConfig } from '.'\nimport { Editor } from './Editor'\nimport { getAttributesFromExtensions } from './helpers/getAttributesFromExtensions'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport { getNodeType } from './helpers/getNodeType'\nimport { getRenderedAttributes } from './helpers/getRenderedAttributes'\nimport { getSchemaByResolvedExtensions } from './helpers/getSchemaByResolvedExtensions'\nimport { getSchemaTypeByName } from './helpers/getSchemaTypeByName'\nimport { isExtensionRulesEnabled } from './helpers/isExtensionRulesEnabled'\nimport { splitExtensions } from './helpers/splitExtensions'\nimport { inputRulesPlugin } from './InputRule'\nimport { pasteRulesPlugin } from './PasteRule'\nimport { AnyConfig, Extensions, RawCommands } from './types'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { findDuplicates } from './utilities/findDuplicates'\n\nexport class ExtensionManager {\n\n  editor: Editor\n\n  schema: Schema\n\n  extensions: Extensions\n\n  splittableMarks: string[] = []\n\n  constructor(extensions: Extensions, editor: Editor) {\n    this.editor = editor\n    this.extensions = ExtensionManager.resolve(extensions)\n    this.schema = getSchemaByResolvedExtensions(this.extensions)\n\n    this.extensions.forEach(extension => {\n      // store extension storage in editor\n      this.editor.extensionStorage[extension.name] = extension.storage\n\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      if (extension.type === 'mark') {\n        const keepOnSplit = callOrReturn(getExtensionField(extension, 'keepOnSplit', context)) ?? true\n\n        if (keepOnSplit) {\n          this.splittableMarks.push(extension.name)\n        }\n      }\n\n      const onBeforeCreate = getExtensionField<AnyConfig['onBeforeCreate']>(\n        extension,\n        'onBeforeCreate',\n        context,\n      )\n\n      if (onBeforeCreate) {\n        this.editor.on('beforeCreate', onBeforeCreate)\n      }\n\n      const onCreate = getExtensionField<AnyConfig['onCreate']>(\n        extension,\n        'onCreate',\n        context,\n      )\n\n      if (onCreate) {\n        this.editor.on('create', onCreate)\n      }\n\n      const onUpdate = getExtensionField<AnyConfig['onUpdate']>(\n        extension,\n        'onUpdate',\n        context,\n      )\n\n      if (onUpdate) {\n        this.editor.on('update', onUpdate)\n      }\n\n      const onSelectionUpdate = getExtensionField<AnyConfig['onSelectionUpdate']>(\n        extension,\n        'onSelectionUpdate',\n        context,\n      )\n\n      if (onSelectionUpdate) {\n        this.editor.on('selectionUpdate', onSelectionUpdate)\n      }\n\n      const onTransaction = getExtensionField<AnyConfig['onTransaction']>(\n        extension,\n        'onTransaction',\n        context,\n      )\n\n      if (onTransaction) {\n        this.editor.on('transaction', onTransaction)\n      }\n\n      const onFocus = getExtensionField<AnyConfig['onFocus']>(\n        extension,\n        'onFocus',\n        context,\n      )\n\n      if (onFocus) {\n        this.editor.on('focus', onFocus)\n      }\n\n      const onBlur = getExtensionField<AnyConfig['onBlur']>(\n        extension,\n        'onBlur',\n        context,\n      )\n\n      if (onBlur) {\n        this.editor.on('blur', onBlur)\n      }\n\n      const onDestroy = getExtensionField<AnyConfig['onDestroy']>(\n        extension,\n        'onDestroy',\n        context,\n      )\n\n      if (onDestroy) {\n        this.editor.on('destroy', onDestroy)\n      }\n    })\n  }\n\n  static resolve(extensions: Extensions): Extensions {\n    const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions))\n    const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name))\n\n    if (duplicatedNames.length) {\n      console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames.map(item => `'${item}'`).join(', ')}]. This can lead to issues.`)\n    }\n\n    return resolvedExtensions\n  }\n\n  static flatten(extensions: Extensions): Extensions {\n    return extensions\n      .map(extension => {\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n        }\n\n        const addExtensions = getExtensionField<AnyConfig['addExtensions']>(\n          extension,\n          'addExtensions',\n          context,\n        )\n\n        if (addExtensions) {\n          return [\n            extension,\n            ...this.flatten(addExtensions()),\n          ]\n        }\n\n        return extension\n      })\n      // `Infinity` will break TypeScript so we set a number that is probably high enough\n      .flat(10)\n  }\n\n  static sort(extensions: Extensions): Extensions {\n    const defaultPriority = 100\n\n    return extensions.sort((a, b) => {\n      const priorityA = getExtensionField<AnyConfig['priority']>(a, 'priority') || defaultPriority\n      const priorityB = getExtensionField<AnyConfig['priority']>(b, 'priority') || defaultPriority\n\n      if (priorityA > priorityB) {\n        return -1\n      }\n\n      if (priorityA < priorityB) {\n        return 1\n      }\n\n      return 0\n    })\n  }\n\n  get commands(): RawCommands {\n    return this.extensions.reduce((commands, extension) => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      const addCommands = getExtensionField<AnyConfig['addCommands']>(\n        extension,\n        'addCommands',\n        context,\n      )\n\n      if (!addCommands) {\n        return commands\n      }\n\n      return {\n        ...commands,\n        ...addCommands(),\n      }\n    }, {} as RawCommands)\n  }\n\n  get plugins(): Plugin[] {\n    const { editor } = this\n\n    // With ProseMirror, first plugins within an array are executed first.\n    // In tiptap, we provide the ability to override plugins,\n    // so it feels more natural to run plugins at the end of an array first.\n    // That’s why we have to reverse the `extensions` array and sort again\n    // based on the `priority` option.\n    const extensions = ExtensionManager.sort([...this.extensions].reverse())\n\n    const inputRules: any[] = []\n    const pasteRules: any[] = []\n\n    const allPlugins = extensions\n      .map(extension => {\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor,\n          type: getSchemaTypeByName(extension.name, this.schema),\n        }\n\n        const plugins: Plugin[] = []\n\n        const addKeyboardShortcuts = getExtensionField<AnyConfig['addKeyboardShortcuts']>(\n          extension,\n          'addKeyboardShortcuts',\n          context,\n        )\n\n        let defaultBindings: Record<string, () => boolean> = {}\n\n        // bind exit handling\n        if (extension.type === 'mark' && extension.config.exitable) {\n          defaultBindings.ArrowRight = () => Mark.handleExit({ editor, mark: (extension as Mark) })\n        }\n\n        if (addKeyboardShortcuts) {\n          const bindings = Object.fromEntries(\n            Object\n              .entries(addKeyboardShortcuts())\n              .map(([shortcut, method]) => {\n                return [shortcut, () => method({ editor })]\n              }),\n          )\n\n          defaultBindings = { ...defaultBindings, ...bindings }\n        }\n\n        const keyMapPlugin = keymap(defaultBindings)\n\n        plugins.push(keyMapPlugin)\n\n        const addInputRules = getExtensionField<AnyConfig['addInputRules']>(\n          extension,\n          'addInputRules',\n          context,\n        )\n\n        if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n          inputRules.push(...addInputRules())\n        }\n\n        const addPasteRules = getExtensionField<AnyConfig['addPasteRules']>(\n          extension,\n          'addPasteRules',\n          context,\n        )\n\n        if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n          pasteRules.push(...addPasteRules())\n        }\n\n        const addProseMirrorPlugins = getExtensionField<AnyConfig['addProseMirrorPlugins']>(\n          extension,\n          'addProseMirrorPlugins',\n          context,\n        )\n\n        if (addProseMirrorPlugins) {\n          const proseMirrorPlugins = addProseMirrorPlugins()\n\n          plugins.push(...proseMirrorPlugins)\n        }\n\n        return plugins\n      })\n      .flat()\n\n    return [\n      inputRulesPlugin({\n        editor,\n        rules: inputRules,\n      }),\n      ...pasteRulesPlugin({\n        editor,\n        rules: pasteRules,\n      }),\n      ...allPlugins,\n    ]\n  }\n\n  get attributes() {\n    return getAttributesFromExtensions(this.extensions)\n  }\n\n  get nodeViews() {\n    const { editor } = this\n    const { nodeExtensions } = splitExtensions(this.extensions)\n\n    return Object.fromEntries(nodeExtensions\n      .filter(extension => !!getExtensionField(extension, 'addNodeView'))\n      .map(extension => {\n        const extensionAttributes = this.attributes.filter(attribute => attribute.type === extension.name)\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor,\n          type: getNodeType(extension.name, this.schema),\n        }\n        const addNodeView = getExtensionField<NodeConfig['addNodeView']>(\n          extension,\n          'addNodeView',\n          context,\n        )\n\n        if (!addNodeView) {\n          return []\n        }\n\n        const nodeview = (\n          node: ProsemirrorNode,\n          view: EditorView,\n          getPos: (() => number) | boolean,\n          decorations: Decoration[],\n        ) => {\n          const HTMLAttributes = getRenderedAttributes(node, extensionAttributes)\n\n          return addNodeView()({\n            editor,\n            node,\n            getPos,\n            decorations,\n            HTMLAttributes,\n            extension,\n          })\n        }\n\n        return [extension.name, nodeview]\n      }))\n  }\n}\n", "// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\n\nfunction getType(value: any): string {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nexport function isPlainObject(value: any): value is Record<string, any> {\n  if (getType(value) !== 'Object') {\n    return false\n  }\n\n  return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype\n}\n", "import { isPlainObject } from './isPlainObject'\n\nexport function mergeDeep(target: Record<string, any>, source: Record<string, any>): Record<string, any> {\n  const output = { ...target }\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isPlainObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, { [key]: source[key] })\n        } else {\n          output[key] = mergeDeep(target[key], source[key])\n        }\n      } else {\n        Object.assign(output, { [key]: source[key] })\n      }\n    })\n  }\n\n  return output\n}\n", "import { Plugin, Transaction } from 'prosemirror-state'\n\nimport { ExtensionConfig } from '.'\nimport { Editor } from './Editor'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport { InputRule } from './InputRule'\nimport { Mark } from './Mark'\nimport { Node } from './Node'\nimport { PasteRule } from './PasteRule'\nimport {\n  AnyConfig,\n  Extensions,\n  GlobalAttributes,\n  KeyboardShortcutCommand,\n  ParentConfig,\n  RawCommands,\n} from './types'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { mergeDeep } from './utilities/mergeDeep'\n\ndeclare module '@tiptap/core' {\n  interface ExtensionConfig<Options = any, Storage = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Default Options\n     */\n    addOptions?: (this: {\n      name: string,\n      parent: Exclude<ParentConfig<ExtensionConfig<Options, Storage>>['addOptions'], undefined>,\n    }) => Options,\n\n    /**\n     * Default Storage\n     */\n    addStorage?: (this: {\n      name: string,\n      options: Options,\n      parent: Exclude<ParentConfig<ExtensionConfig<Options, Storage>>['addStorage'], undefined>,\n    }) => Storage,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addPasteRules'],\n    }) => PasteRule[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['extendMarkSchema'],\n      },\n      extension: Mark,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        parent: ParentConfig<ExtensionConfig<Options, Storage>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['onDestroy'],\n    }) => void) | null,\n  }\n}\n\nexport class Extension<Options = any, Storage = any> {\n  type = 'extension'\n\n  name = 'extension'\n\n  parent: Extension | null = null\n\n  child: Extension | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: ExtensionConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<ExtensionConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`)\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n        this,\n        'addOptions',\n        {\n          name: this.name,\n        },\n      ))\n    }\n\n    this.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      this,\n      'addStorage',\n      {\n        name: this.name,\n        options: this.options,\n      },\n    )) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<ExtensionConfig<O, S>> = {}) {\n    return new Extension<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(extendedConfig: Partial<ExtensionConfig<ExtendedOptions, ExtendedStorage>> = {}) {\n    const extension = new Extension<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`)\n    }\n\n    extension.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n      extension,\n      'addOptions',\n      {\n        name: extension.name,\n      },\n    ))\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { Range, TextSerializer } from '../types'\n\nexport function getTextBetween(\n  startNode: ProseMirrorNode,\n  range: Range,\n  options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  },\n): string {\n  const { from, to } = range\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {},\n  } = options || {}\n  let text = ''\n  let separated = true\n\n  startNode.nodesBetween(from, to, (node, pos, parent, index) => {\n    const textSerializer = textSerializers?.[node.type.name]\n\n    if (textSerializer) {\n      if (node.isBlock && !separated) {\n        text += blockSeparator\n        separated = true\n      }\n\n      if (parent) {\n        text += textSerializer({\n          node,\n          pos,\n          parent,\n          index,\n          range,\n        })\n      }\n    } else if (node.isText) {\n      text += node?.text?.slice(Math.max(from, pos) - pos, to - pos) // eslint-disable-line\n      separated = false\n    } else if (node.isBlock && !separated) {\n      text += blockSeparator\n      separated = true\n    }\n  })\n\n  return text\n}\n", "import { Schema } from 'prosemirror-model'\n\nimport { TextSerializer } from '../types'\n\nexport function getTextSerializersFromSchema(schema: Schema): Record<string, TextSerializer> {\n  return Object.fromEntries(Object\n    .entries(schema.nodes)\n    .filter(([, node]) => node.spec.toText)\n    .map(([name, node]) => [name, node.spec.toText]))\n}\n", "import { Plugin, PluginKey } from 'prosemirror-state'\n\nimport { Extension } from '../Extension'\nimport { getTextBetween } from '../helpers/getTextBetween'\nimport { getTextSerializersFromSchema } from '../helpers/getTextSerializersFromSchema'\n\nexport const ClipboardTextSerializer = Extension.create({\n  name: 'clipboardTextSerializer',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('clipboardTextSerializer'),\n        props: {\n          clipboardTextSerializer: () => {\n            const { editor } = this\n            const { state, schema } = editor\n            const { doc, selection } = state\n            const { ranges } = selection\n            const from = Math.min(...ranges.map(range => range.$from.pos))\n            const to = Math.max(...ranges.map(range => range.$to.pos))\n            const textSerializers = getTextSerializersFromSchema(schema)\n            const range = { from, to }\n\n            return getTextBetween(doc, range, {\n              textSerializers,\n            })\n          },\n        },\n      }),\n    ]\n  },\n})\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    blur: {\n      /**\n       * Removes focus from the editor.\n       */\n      blur: () => ReturnType,\n    }\n  }\n}\n\nexport const blur: RawCommands['blur'] = () => ({ editor, view }) => {\n  requestAnimationFrame(() => {\n    if (!editor.isDestroyed) {\n      (view.dom as HTMLElement).blur()\n\n      // Browsers should remove the caret on blur but safari does not.\n      // See: https://github.com/ueberdosis/tiptap/issues/2405\n      window?.getSelection()?.removeAllRanges()\n    }\n  })\n\n  return true\n}\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    clearContent: {\n      /**\n       * Clear the whole document.\n       */\n      clearContent: (emitUpdate?: boolean) => ReturnType,\n    }\n  }\n}\n\nexport const clearContent: RawCommands['clearContent'] = (emitUpdate = false) => ({ commands }) => {\n  return commands.setContent('', emitUpdate)\n}\n", "import { liftTarget } from 'prosemirror-transform'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    clearNodes: {\n      /**\n       * Normalize nodes to a simple paragraph.\n       */\n      clearNodes: () => ReturnType,\n    }\n  }\n}\n\nexport const clearNodes: RawCommands['clearNodes'] = () => ({ state, tr, dispatch }) => {\n  const { selection } = tr\n  const { ranges } = selection\n\n  if (!dispatch) {\n    return true\n  }\n\n  ranges.forEach(({ $from, $to }) => {\n    state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\n      if (node.type.isText) {\n        return\n      }\n\n      const { doc, mapping } = tr\n      const $mappedFrom = doc.resolve(mapping.map(pos))\n      const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize))\n      const nodeRange = $mappedFrom.blockRange($mappedTo)\n\n      if (!nodeRange) {\n        return\n      }\n\n      const targetLiftDepth = liftTarget(nodeRange)\n\n      if (node.type.isTextblock) {\n        const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index())\n\n        tr.setNodeMarkup(nodeRange.start, defaultType)\n      }\n\n      if (targetLiftDepth || targetLiftDepth === 0) {\n        tr.lift(nodeRange, targetLiftDepth)\n      }\n    })\n  })\n\n  return true\n}\n", "import { Command, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    command: {\n      /**\n       * Define a command inline.\n       */\n      command: (fn: (props: Parameters<Command>[0]) => boolean) => ReturnType,\n    }\n  }\n}\n\nexport const command: RawCommands['command'] = fn => props => {\n  return fn(props)\n}\n", "import { createParagraphNear as originalCreateParagraphNear } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    createParagraphNear: {\n      /**\n       * Create a paragraph nearby.\n       */\n      createParagraphNear: () => ReturnType,\n    }\n  }\n}\n\nexport const createParagraphNear: RawCommands['createParagraphNear'] = () => ({ state, dispatch }) => {\n  return originalCreateParagraphNear(state, dispatch)\n}\n", "import { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteNode: {\n      /**\n       * Delete a node.\n       */\n      deleteNode: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const deleteNode: RawCommands['deleteNode'] = typeOrName => ({ tr, state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const $pos = tr.selection.$anchor\n\n  for (let depth = $pos.depth; depth > 0; depth -= 1) {\n    const node = $pos.node(depth)\n\n    if (node.type === type) {\n      if (dispatch) {\n        const from = $pos.before(depth)\n        const to = $pos.after(depth)\n\n        tr.delete(from, to).scrollIntoView()\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n", "import { Range, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteRange: {\n      /**\n       * Delete a given range.\n       */\n      deleteRange: (range: Range) => ReturnType,\n    }\n  }\n}\n\nexport const deleteRange: RawCommands['deleteRange'] = range => ({ tr, dispatch }) => {\n  const { from, to } = range\n\n  if (dispatch) {\n    tr.delete(from, to)\n  }\n\n  return true\n}\n", "import { deleteSelection as originalDeleteSelection } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteSelection: {\n      /**\n       * Delete the selection, if there is one.\n       */\n      deleteSelection: () => ReturnType,\n    }\n  }\n}\n\nexport const deleteSelection: RawCommands['deleteSelection'] = () => ({ state, dispatch }) => {\n  return originalDeleteSelection(state, dispatch)\n}\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    enter: {\n      /**\n       * Trigger enter.\n       */\n      enter: () => ReturnType,\n    }\n  }\n}\n\nexport const enter: RawCommands['enter'] = () => ({ commands }) => {\n  return commands.keyboardShortcut('Enter')\n}\n", "import { exitCode as originalExitCode } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    exitCode: {\n      /**\n       * Exit from a code block.\n       */\n      exitCode: () => ReturnType,\n    }\n  }\n}\n\nexport const exitCode: RawCommands['exitCode'] = () => ({ state, dispatch }) => {\n  return originalExitCode(state, dispatch)\n}\n", "import { isRegExp } from './isRegExp'\n\n/**\n * Check if object1 includes object2\n * @param object1 Object\n * @param object2 Object\n */\nexport function objectIncludes(\n  object1: Record<string, any>,\n  object2: Record<string, any>,\n  options: { strict: boolean } = { strict: true },\n): boolean {\n  const keys = Object.keys(object2)\n\n  if (!keys.length) {\n    return true\n  }\n\n  return keys.every(key => {\n    if (options.strict) {\n      return object2[key] === object1[key]\n    }\n\n    if (isRegExp(object2[key])) {\n      return object2[key].test(object1[key])\n    }\n\n    return object2[key] === object1[key]\n  })\n}\n", "import { Mark as ProseMirrorMark, MarkType, ResolvedPos } from 'prosemirror-model'\n\nimport { Range } from '../types'\nimport { objectIncludes } from '../utilities/objectIncludes'\n\nfunction findMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): ProseMirrorMark | undefined {\n  return marks.find(item => {\n    return item.type === type && objectIncludes(item.attrs, attributes)\n  })\n}\n\nfunction isMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): boolean {\n  return !!findMarkInSet(marks, type, attributes)\n}\n\nexport function getMarkRange(\n  $pos: ResolvedPos,\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): Range | void {\n  if (!$pos || !type) {\n    return\n  }\n\n  let start = $pos.parent.childAfter($pos.parentOffset)\n\n  if ($pos.parentOffset === start.offset && start.offset !== 0) {\n    start = $pos.parent.childBefore($pos.parentOffset)\n  }\n\n  if (!start.node) {\n    return\n  }\n\n  const mark = findMarkInSet([...start.node.marks], type, attributes)\n\n  if (!mark) {\n    return\n  }\n\n  let startIndex = start.index\n  let startPos = $pos.start() + start.offset\n  let endIndex = startIndex + 1\n  let endPos = startPos + start.node.nodeSize\n\n  findMarkInSet([...start.node.marks], type, attributes)\n\n  while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {\n    startIndex -= 1\n    startPos -= $pos.parent.child(startIndex).nodeSize\n  }\n\n  while (\n    endIndex < $pos.parent.childCount\n    && isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)\n  ) {\n    endPos += $pos.parent.child(endIndex).nodeSize\n    endIndex += 1\n  }\n\n  return {\n    from: startPos,\n    to: endPos,\n  }\n}\n", "import { MarkType, Schema } from 'prosemirror-model'\n\nexport function getMarkType(nameOrType: string | MarkType, schema: Schema): MarkType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.marks[nameOrType]) {\n      throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`)\n    }\n\n    return schema.marks[nameOrType]\n  }\n\n  return nameOrType\n}\n", "import { MarkType } from 'prosemirror-model'\nimport { TextSelection } from 'prosemirror-state'\n\nimport { getMarkRange } from '../helpers/getMarkRange'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    extendMarkRange: {\n      /**\n       * Extends the text selection to the current mark.\n       */\n      extendMarkRange: (typeOrName: string | MarkType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const extendMarkRange: RawCommands['extendMarkRange'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const type = getMarkType(typeOrName, state.schema)\n  const { doc, selection } = tr\n  const { $from, from, to } = selection\n\n  if (dispatch) {\n    const range = getMarkRange($from, type, attributes)\n\n    if (range && range.from <= from && range.to >= to) {\n      const newSelection = TextSelection.create(doc, range.from, range.to)\n\n      tr.setSelection(newSelection)\n    }\n  }\n\n  return true\n}\n", "import { Command, CommandProps, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    first: {\n      /**\n       * Runs one command after the other and stops at the first which returns true.\n       */\n      first: (commands: Command[] | ((props: CommandProps) => Command[])) => ReturnType,\n    }\n  }\n}\n\nexport const first: RawCommands['first'] = commands => props => {\n  const items = typeof commands === 'function'\n    ? commands(props)\n    : commands\n\n  for (let i = 0; i < items.length; i += 1) {\n    if (items[i](props)) {\n      return true\n    }\n  }\n\n  return false\n}\n", "import { TextSelection } from 'prosemirror-state'\n\nexport function isTextSelection(value: unknown): value is TextSelection {\n  return value instanceof TextSelection\n}\n", "export function minMax(value = 0, min = 0, max = 0): number {\n  return Math.min(Math.max(value, min), max)\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Selection, TextSelection } from 'prosemirror-state'\n\nimport { FocusPosition } from '../types'\nimport { minMax } from '../utilities/minMax'\n\nexport function resolveFocusPosition(\n  doc: ProseMirrorNode,\n  position: FocusPosition = null,\n): Selection | null {\n\n  if (!position) {\n    return null\n  }\n\n  const selectionAtStart = Selection.atStart(doc)\n  const selectionAtEnd = Selection.atEnd(doc)\n\n  if (position === 'start' || position === true) {\n    return selectionAtStart\n  }\n\n  if (position === 'end') {\n    return selectionAtEnd\n  }\n\n  const minPos = selectionAtStart.from\n  const maxPos = selectionAtEnd.to\n\n  if (position === 'all') {\n    return TextSelection.create(\n      doc,\n      minMax(0, minPos, maxPos),\n      minMax(doc.content.size, minPos, maxPos),\n    )\n  }\n\n  return TextSelection.create(\n    doc,\n    minMax(position, minPos, maxPos),\n    minMax(position, minPos, maxPos),\n  )\n}\n", "export function isiOS(): boolean {\n  return [\n    'iPad Simulator',\n    'iPhone Simulator',\n    'iPod Simulator',\n    'iPad',\n    'iPhone',\n    'iPod',\n  ].includes(navigator.platform)\n  // iPad on iOS 13 detection\n  || (navigator.userAgent.includes('Mac') && 'ontouchend' in document)\n}\n", "import { isTextSelection } from '../helpers/isTextSelection'\nimport { resolveFocusPosition } from '../helpers/resolveFocusPosition'\nimport { FocusPosition, RawCommands } from '../types'\nimport { isiOS } from '../utilities/isiOS'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    focus: {\n      /**\n       * Focus the editor at the given position.\n       */\n      focus: (\n        position?: FocusPosition,\n        options?: {\n          scrollIntoView?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const focus: RawCommands['focus'] = (position = null, options = {}) => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  options = {\n    scrollIntoView: true,\n    ...options,\n  }\n\n  const delayedFocus = () => {\n    // focus within `requestAnimationFrame` breaks focus on iOS\n    // so we have to call this\n    if (isiOS()) {\n      (view.dom as HTMLElement).focus()\n    }\n\n    // For React we have to focus asynchronously. Otherwise wild things happen.\n    // see: https://github.com/ueberdosis/tiptap/issues/1520\n    requestAnimationFrame(() => {\n      if (!editor.isDestroyed) {\n        view.focus()\n\n        if (options?.scrollIntoView) {\n          editor.commands.scrollIntoView()\n        }\n      }\n    })\n  }\n\n  if ((view.hasFocus() && position === null) || position === false) {\n    return true\n  }\n\n  // we don’t try to resolve a NodeSelection or CellSelection\n  if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n    delayedFocus()\n    return true\n  }\n\n  // pass through tr.doc instead of editor.state.doc\n  // since transactions could change the editors state before this command has been run\n  const selection = resolveFocusPosition(tr.doc, position) || editor.state.selection\n  const isSameSelection = editor.state.selection.eq(selection)\n\n  if (dispatch) {\n    if (!isSameSelection) {\n      tr.setSelection(selection)\n    }\n\n    // `tr.setSelection` resets the stored marks\n    // so we’ll restore them if the selection is the same as before\n    if (isSameSelection && tr.storedMarks) {\n      tr.setStoredMarks(tr.storedMarks)\n    }\n\n    delayedFocus()\n  }\n\n  return true\n}\n", "import { CommandProps, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    forEach: {\n      /**\n       * Loop through an array of items.\n       */\n      forEach: <T>(\n        items: T[],\n        fn: (\n          item: T,\n          props: CommandProps & {\n            index: number,\n          },\n        ) => boolean,\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const forEach: RawCommands['forEach'] = (items, fn) => props => {\n  return items.every((item, index) => fn(item, { ...props, index }))\n}\n", "import { ParseOptions } from 'prosemirror-model'\n\nimport { Content, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    insertContent: {\n      /**\n       * Insert a node or string of HTML at the current position.\n       */\n      insertContent: (\n        value: Content,\n        options?: {\n          parseOptions?: ParseOptions,\n          updateSelection?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const insertContent: RawCommands['insertContent'] = (value, options) => ({ tr, commands }) => {\n  return commands.insertContentAt({ from: tr.selection.from, to: tr.selection.to }, value, options)\n}\n", "export function elementFromString(value: string): HTMLElement {\n  // add a wrapper to preserve leading and trailing whitespace\n  const wrappedValue = `<body>${value}</body>`\n\n  return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body\n}\n", "import {\n  DOMParser,\n  Fragment,\n  Node as ProseMirrorNode,\n  ParseOptions,\n  Schema,\n} from 'prosemirror-model'\n\nimport { Content } from '../types'\nimport { elementFromString } from '../utilities/elementFromString'\n\nexport type CreateNodeFromContentOptions = {\n  slice?: boolean,\n  parseOptions?: ParseOptions,\n}\n\nexport function createNodeFromContent(\n  content: Content,\n  schema: Schema,\n  options?: CreateNodeFromContentOptions,\n): ProseMirrorNode | Fragment {\n  options = {\n    slice: true,\n    parseOptions: {},\n    ...options,\n  }\n\n  if (typeof content === 'object' && content !== null) {\n    try {\n      if (Array.isArray(content)) {\n        return Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)))\n      }\n\n      return schema.nodeFromJSON(content)\n    } catch (error) {\n      console.warn(\n        '[tiptap warn]: Invalid content.',\n        'Passed value:',\n        content,\n        'Error:',\n        error,\n      )\n\n      return createNodeFromContent('', schema, options)\n    }\n  }\n\n  if (typeof content === 'string') {\n    const parser = DOMParser.fromSchema(schema)\n\n    return options.slice\n      ? parser.parseSlice(elementFromString(content), options.parseOptions).content\n      : parser.parse(elementFromString(content), options.parseOptions)\n  }\n\n  return createNodeFromContent('', schema, options)\n}\n", "import { Selection, Transaction } from 'prosemirror-state'\nimport { ReplaceAroundStep, ReplaceStep } from 'prosemirror-transform'\n\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nexport function selectionToInsertionEnd(tr: Transaction, startLen: number, bias: number) {\n  const last = tr.steps.length - 1\n\n  if (last < startLen) {\n    return\n  }\n\n  const step = tr.steps[last]\n\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {\n    return\n  }\n\n  const map = tr.mapping.maps[last]\n  let end = 0\n\n  map.forEach((_from, _to, _newFrom, newTo) => {\n    if (end === 0) {\n      end = newTo\n    }\n  })\n\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n", "import { Fragment, Node as ProseMirrorNode, ParseOptions } from 'prosemirror-model'\n\nimport { createNodeFromContent } from '../helpers/createNodeFromContent'\nimport { selectionToInsertionEnd } from '../helpers/selectionToInsertionEnd'\nimport {\n  Content,\n  Range,\n  RawCommands,\n} from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    insertContentAt: {\n      /**\n       * Insert a node or string of HTML at a specific position.\n       */\n      insertContentAt: (\n        position: number | Range,\n        value: Content,\n        options?: {\n          parseOptions?: ParseOptions,\n          updateSelection?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nconst isFragment = (nodeOrFragment: ProseMirrorNode | Fragment): nodeOrFragment is Fragment => {\n  return nodeOrFragment.toString().startsWith('<')\n}\n\nexport const insertContentAt: RawCommands['insertContentAt'] = (position, value, options) => ({ tr, dispatch, editor }) => {\n  if (dispatch) {\n    options = {\n      parseOptions: {},\n      updateSelection: true,\n      ...options,\n    }\n\n    const content = createNodeFromContent(value, editor.schema, {\n      parseOptions: {\n        preserveWhitespace: 'full',\n        ...options.parseOptions,\n      },\n    })\n\n    // don’t dispatch an empty fragment because this can lead to strange errors\n    if (content.toString() === '<>') {\n      return true\n    }\n\n    let { from, to } = typeof position === 'number'\n      ? { from: position, to: position }\n      : position\n\n    let isOnlyTextContent = true\n    let isOnlyBlockContent = true\n    const nodes = isFragment(content)\n      ? content\n      : [content]\n\n    nodes.forEach(node => {\n      // check if added node is valid\n      node.check()\n\n      isOnlyTextContent = isOnlyTextContent\n        ? node.isText && node.marks.length === 0\n        : false\n\n      isOnlyBlockContent = isOnlyBlockContent\n        ? node.isBlock\n        : false\n    })\n\n    // check if we can replace the wrapping node by\n    // the newly inserted content\n    // example:\n    // replace an empty paragraph by an inserted image\n    // instead of inserting the image below the paragraph\n    if (from === to && isOnlyBlockContent) {\n      const { parent } = tr.doc.resolve(from)\n      const isEmptyTextBlock = parent.isTextblock\n        && !parent.type.spec.code\n        && !parent.childCount\n\n      if (isEmptyTextBlock) {\n        from -= 1\n        to += 1\n      }\n    }\n\n    // if there is only plain text we have to use `insertText`\n    // because this will keep the current marks\n    if (isOnlyTextContent) {\n      tr.insertText(value as string, from, to)\n    } else {\n      tr.replaceWith(from, to, content)\n    }\n\n    // set cursor at end of inserted content\n    if (options.updateSelection) {\n      selectionToInsertionEnd(tr, tr.steps.length - 1, -1)\n    }\n  }\n\n  return true\n}\n", "import { joinBackward as originalJoinBackward } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinBackward: {\n      /**\n       * Join two nodes backward.\n       */\n      joinBackward: () => ReturnType,\n    }\n  }\n}\n\nexport const joinBackward: RawCommands['joinBackward'] = () => ({ state, dispatch }) => {\n  return originalJoinBackward(state, dispatch)\n}\n", "import { joinForward as originalJoinForward } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinForward: {\n      /**\n       * Join two nodes forward.\n       */\n      joinForward: () => ReturnType,\n    }\n  }\n}\n\nexport const joinForward: RawCommands['joinForward'] = () => ({ state, dispatch }) => {\n  return originalJoinForward(state, dispatch)\n}\n", "export function isMacOS(): boolean {\n  return typeof navigator !== 'undefined'\n    ? /Mac/.test(navigator.platform)\n    : false\n}\n", "import { RawCommands } from '../types'\nimport { isiOS } from '../utilities/isiOS'\nimport { isMacOS } from '../utilities/isMacOS'\n\nfunction normalizeKeyName(name: string) {\n  const parts = name.split(/-(?!$)/)\n  let result = parts[parts.length - 1]\n\n  if (result === 'Space') {\n    result = ' '\n  }\n\n  let alt\n  let ctrl\n  let shift\n  let meta\n\n  for (let i = 0; i < parts.length - 1; i += 1) {\n    const mod = parts[i]\n\n    if (/^(cmd|meta|m)$/i.test(mod)) {\n      meta = true\n    } else if (/^a(lt)?$/i.test(mod)) {\n      alt = true\n    } else if (/^(c|ctrl|control)$/i.test(mod)) {\n      ctrl = true\n    } else if (/^s(hift)?$/i.test(mod)) {\n      shift = true\n    } else if (/^mod$/i.test(mod)) {\n      if (isiOS() || isMacOS()) {\n        meta = true\n      } else {\n        ctrl = true\n      }\n    } else {\n      throw new Error(`Unrecognized modifier name: ${mod}`)\n    }\n  }\n\n  if (alt) {\n    result = `Alt-${result}`\n  }\n\n  if (ctrl) {\n    result = `Ctrl-${result}`\n  }\n\n  if (meta) {\n    result = `Meta-${result}`\n  }\n\n  if (shift) {\n    result = `Shift-${result}`\n  }\n\n  return result\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    keyboardShortcut: {\n      /**\n       * Trigger a keyboard shortcut.\n       */\n      keyboardShortcut: (name: string) => ReturnType,\n    }\n  }\n}\n\nexport const keyboardShortcut: RawCommands['keyboardShortcut'] = name => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  const keys = normalizeKeyName(name).split(/-(?!$)/)\n  const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item))\n  const event = new KeyboardEvent('keydown', {\n    key: key === 'Space'\n      ? ' '\n      : key,\n    altKey: keys.includes('Alt'),\n    ctrlKey: keys.includes('Ctrl'),\n    metaKey: keys.includes('Meta'),\n    shiftKey: keys.includes('Shift'),\n    bubbles: true,\n    cancelable: true,\n  })\n\n  const capturedTransaction = editor.captureTransaction(() => {\n    view.someProp('handleKeyDown', f => f(view, event))\n  })\n\n  capturedTransaction?.steps.forEach(step => {\n    const newStep = step.map(tr.mapping)\n\n    if (newStep && dispatch) {\n      tr.maybeStep(newStep)\n    }\n  })\n\n  return true\n}\n", "import { NodeType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\n\nimport { NodeRange } from '../types'\nimport { objectIncludes } from '../utilities/objectIncludes'\nimport { getNodeType } from './getNodeType'\n\nexport function isNodeActive(\n  state: EditorState,\n  typeOrName: NodeType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { from, to, empty } = state.selection\n  const type = typeOrName\n    ? getNodeType(typeOrName, state.schema)\n    : null\n\n  const nodeRanges: NodeRange[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isText) {\n      return\n    }\n\n    const relativeFrom = Math.max(from, pos)\n    const relativeTo = Math.min(to, pos + node.nodeSize)\n\n    nodeRanges.push({\n      node,\n      from: relativeFrom,\n      to: relativeTo,\n    })\n  })\n\n  const selectionRange = to - from\n  const matchedNodeRanges = nodeRanges\n    .filter(nodeRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === nodeRange.node.type.name\n    })\n    .filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, { strict: false }))\n\n  if (empty) {\n    return !!matchedNodeRanges.length\n  }\n\n  const range = matchedNodeRanges\n    .reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0)\n\n  return range >= selectionRange\n}\n", "import { lift as originalLift } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { isNodeActive } from '../helpers/isNodeActive'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    lift: {\n      /**\n       * Removes an existing wrap.\n       */\n      lift: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const lift: RawCommands['lift'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (!isActive) {\n    return false\n  }\n\n  return originalLift(state, dispatch)\n}\n", "import { liftEmptyBlock as originalLiftEmptyBlock } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    liftEmptyBlock: {\n      /**\n       * Lift block if empty.\n       */\n      liftEmptyBlock: () => ReturnType,\n    }\n  }\n}\n\nexport const liftEmptyBlock: RawCommands['liftEmptyBlock'] = () => ({ state, dispatch }) => {\n  return originalLiftEmptyBlock(state, dispatch)\n}\n", "import { NodeType } from 'prosemirror-model'\nimport { liftListItem as originalLiftListItem } from 'prosemirror-schema-list'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    liftListItem: {\n      /**\n       * Lift the list item into a wrapping list.\n       */\n      liftListItem: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const liftListItem: RawCommands['liftListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalLiftListItem(type)(state, dispatch)\n}\n", "import { newlineInCode as originalNewlineInCode } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    newlineInCode: {\n      /**\n       * Add a newline character in code.\n       */\n      newlineInCode: () => ReturnType,\n    }\n  }\n}\n\nexport const newlineInCode: RawCommands['newlineInCode'] = () => ({ state, dispatch }) => {\n  return originalNewlineInCode(state, dispatch)\n}\n", "import { Schema } from 'prosemirror-model'\n\nexport function getSchemaTypeNameByName(name: string, schema: Schema): 'node' | 'mark' | null {\n  if (schema.nodes[name]) {\n    return 'node'\n  }\n\n  if (schema.marks[name]) {\n    return 'mark'\n  }\n\n  return null\n}\n", "/**\n * Remove a property or an array of properties from an object\n * @param obj Object\n * @param key Key to remove\n */\nexport function deleteProps(obj: Record<string, any>, propOrProps: string | string[]): Record<string, any> {\n  const props = typeof propOrProps === 'string'\n    ? [propOrProps]\n    : propOrProps\n\n  return Object\n    .keys(obj)\n    .reduce((newObj: Record<string, any>, prop) => {\n      if (!props.includes(prop)) {\n        newObj[prop] = obj[prop]\n      }\n\n      return newObj\n    }, {})\n}\n", "import { MarkType, NodeType } from 'prosemirror-model'\n\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { getSchemaTypeNameByName } from '../helpers/getSchemaTypeNameByName'\nimport { RawCommands } from '../types'\nimport { deleteProps } from '../utilities/deleteProps'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    resetAttributes: {\n      /**\n       * Resets some node attributes to the default value.\n       */\n      resetAttributes: (typeOrName: string | NodeType | MarkType, attributes: string | string[]) => ReturnType,\n    }\n  }\n}\n\nexport const resetAttributes: RawCommands['resetAttributes'] = (typeOrName, attributes) => ({ tr, state, dispatch }) => {\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes))\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)))\n            }\n          })\n        }\n      })\n    })\n  }\n\n  return true\n}\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    scrollIntoView: {\n      /**\n       * Scroll the selection into view.\n       */\n      scrollIntoView: () => ReturnType,\n    }\n  }\n}\n\nexport const scrollIntoView: RawCommands['scrollIntoView'] = () => ({ tr, dispatch }) => {\n  if (dispatch) {\n    tr.scrollIntoView()\n  }\n\n  return true\n}\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectAll: {\n      /**\n       * Select the whole document.\n       */\n      selectAll: () => ReturnType,\n    }\n  }\n}\n\nexport const selectAll: RawCommands['selectAll'] = () => ({ tr, commands }) => {\n  return commands.setTextSelection({\n    from: 0,\n    to: tr.doc.content.size,\n  })\n}\n", "import { selectNodeBackward as originalSelectNodeBackward } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectNodeBackward: {\n      /**\n       * Select a node backward.\n       */\n      selectNodeBackward: () => ReturnType,\n    }\n  }\n}\n\nexport const selectNodeBackward: RawCommands['selectNodeBackward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeBackward(state, dispatch)\n}\n", "import { selectNodeForward as originalSelectNodeForward } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectNodeForward: {\n      /**\n       * Select a node forward.\n       */\n      selectNodeForward: () => ReturnType,\n    }\n  }\n}\n\nexport const selectNodeForward: RawCommands['selectNodeForward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeForward(state, dispatch)\n}\n", "import { selectParentNode as originalSelectParentNode } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectParentNode: {\n      /**\n       * Select the parent node.\n       */\n      selectParentNode: () => ReturnType,\n    }\n  }\n}\n\nexport const selectParentNode: RawCommands['selectParentNode'] = () => ({ state, dispatch }) => {\n  return originalSelectParentNode(state, dispatch)\n}\n", "// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nimport { selectTextblockEnd as originalSelectTextblockEnd } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectTextblockEnd: {\n      /**\n       * Moves the cursor to the end of current text block.\n       */\n      selectTextblockEnd: () => ReturnType,\n    }\n  }\n}\n\nexport const selectTextblockEnd: RawCommands['selectTextblockEnd'] = () => ({ state, dispatch }) => {\n  return originalSelectTextblockEnd(state, dispatch)\n}\n", "// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nimport { selectTextblockStart as originalSelectTextblockStart } from 'prosemirror-commands'\n\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectTextblockStart: {\n      /**\n       * Moves the cursor to the start of current text block.\n       */\n      selectTextblockStart: () => ReturnType,\n    }\n  }\n}\n\nexport const selectTextblockStart: RawCommands['selectTextblockStart'] = () => ({ state, dispatch }) => {\n  return originalSelectTextblockStart(state, dispatch)\n}\n", "import { Node as ProseMirrorNode, ParseOptions, Schema } from 'prosemirror-model'\n\nimport { Content } from '../types'\nimport { createNodeFromContent } from './createNodeFromContent'\n\nexport function createDocument(\n  content: Content,\n  schema: Schema,\n  parseOptions: ParseOptions = {},\n): ProseMirrorNode {\n  return createNodeFromContent(content, schema, { slice: false, parseOptions }) as ProseMirrorNode\n}\n", "import { ParseOptions } from 'prosemirror-model'\n\nimport { createDocument } from '../helpers/createDocument'\nimport { Content, RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setContent: {\n      /**\n       * Replace the whole document with new content.\n       */\n      setContent: (\n        content: Content,\n        emitUpdate?: boolean,\n        parseOptions?: ParseOptions,\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const setContent: RawCommands['setContent'] = (content, emitUpdate = false, parseOptions = {}) => ({ tr, editor, dispatch }) => {\n  const { doc } = tr\n  const document = createDocument(content, editor.schema, parseOptions)\n\n  if (dispatch) {\n    tr.replaceWith(0, doc.content.size, document)\n      .setMeta('preventUpdate', !emitUpdate)\n  }\n\n  return true\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { Transaction } from 'prosemirror-state'\nimport { Transform } from 'prosemirror-transform'\n\n/**\n * Returns a new `Transform` based on all steps of the passed transactions.\n */\nexport function combineTransactionSteps(oldDoc: ProseMirrorNode, transactions: Transaction[]): Transform {\n  const transform = new Transform(oldDoc)\n\n  transactions.forEach(transaction => {\n    transaction.steps.forEach(step => {\n      transform.step(step)\n    })\n  })\n\n  return transform\n}\n", "import { ContentMatch, NodeType } from 'prosemirror-model'\n\nexport function defaultBlockAt(match: ContentMatch): NodeType | null {\n  for (let i = 0; i < match.edgeCount; i += 1) {\n    const { type } = match.edge(i)\n\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type\n    }\n  }\n\n  return null\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { NodeWithPos, Predicate } from '../types'\n\nexport function findChildren(node: ProseMirrorNode, predicate: Predicate): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  node.descendants((child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { NodeWithPos, Predicate, Range } from '../types'\n\n/**\n * Same as `findChildren` but searches only within a `range`.\n */\nexport function findChildrenInRange(node: ProseMirrorNode, range: Range, predicate: Predicate): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  // if (range.from === range.to) {\n  //   const nodeAt = node.nodeAt(range.from)\n\n  //   if (nodeAt) {\n  //     nodesWithPos.push({\n  //       node: nodeAt,\n  //       pos: range.from,\n  //     })\n  //   }\n  // }\n\n  node.nodesBetween(range.from, range.to, (child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n", "import { Node as ProseMirrorNode, ResolvedPos } from 'prosemirror-model'\n\nimport { Predicate } from '../types'\n\nexport function findParentNodeClosestToPos($pos: ResolvedPos, predicate: Predicate): ({\n  pos: number,\n  start: number,\n  depth: number,\n  node: ProseMirrorNode,\n} | undefined) {\n  for (let i = $pos.depth; i > 0; i -= 1) {\n    const node = $pos.node(i)\n\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node,\n      }\n    }\n  }\n}\n", "import { Selection } from 'prosemirror-state'\n\nimport { Predicate } from '../types'\nimport { findParentNodeClosestToPos } from './findParentNodeClosestToPos'\n\nexport function findParentNode(predicate: Predicate) {\n  return (selection: Selection) => findParentNodeClosestToPos(selection.$from, predicate)\n}\n", "import { DOMSerializer, Fragment, Schema } from 'prosemirror-model'\n\nexport function getHTMLFromFragment(fragment: Fragment, schema: Schema): string {\n  const documentFragment = DOMSerializer\n    .fromSchema(schema)\n    .serializeFragment(fragment)\n\n  const temporaryDocument = document.implementation.createHTMLDocument()\n  const container = temporaryDocument.createElement('div')\n\n  container.appendChild(documentFragment)\n\n  return container.innerHTML\n}\n", "import { Schema } from 'prosemirror-model'\n\nimport { ExtensionManager } from '../ExtensionManager'\nimport { Extensions } from '../types'\nimport { getSchemaByResolvedExtensions } from './getSchemaByResolvedExtensions'\n\nexport function getSchema(extensions: Extensions): Schema {\n  const resolvedExtensions = ExtensionManager.resolve(extensions)\n\n  return getSchemaByResolvedExtensions(resolvedExtensions)\n}\n", "import { Node } from 'prosemirror-model'\n\nimport { Extensions, JSONContent } from '../types'\nimport { getHTMLFromFragment } from './getHTMLFromFragment'\nimport { getSchema } from './getSchema'\n\nexport function generateHTML(doc: JSONContent, extensions: Extensions): string {\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getHTMLFromFragment(contentNode.content, schema)\n}\n", "import { DOMParser } from 'prosemirror-model'\n\nimport { Extensions } from '../types'\nimport { elementFromString } from '../utilities/elementFromString'\nimport { getSchema } from './getSchema'\n\nexport function generateJSON(html: string, extensions: Extensions): Record<string, any> {\n  const schema = getSchema(extensions)\n  const dom = elementFromString(html)\n\n  return DOMParser.fromSchema(schema)\n    .parse(dom)\n    .toJSON()\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { TextSerializer } from '../types'\nimport { getTextBetween } from './getTextBetween'\n\nexport function getText(\n  node: ProseMirrorNode,\n  options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  },\n) {\n  const range = {\n    from: 0,\n    to: node.content.size,\n  }\n\n  return getTextBetween(node, range, options)\n}\n", "import { Node } from 'prosemirror-model'\n\nimport { Extensions, JSONContent, TextSerializer } from '../types'\nimport { getSchema } from './getSchema'\nimport { getText } from './getText'\nimport { getTextSerializersFromSchema } from './getTextSerializersFromSchema'\n\nexport function generateText(\n  doc: JSONContent,\n  extensions: Extensions,\n  options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  },\n): string {\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {},\n  } = options || {}\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getText(contentNode, {\n    blockSeparator,\n    textSerializers: {\n      ...textSerializers,\n      ...getTextSerializersFromSchema(schema),\n    },\n  })\n}\n", "import { Mark, MarkType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\n\nimport { getMarkType } from './getMarkType'\n\nexport function getMarkAttributes(state: EditorState, typeOrName: string | MarkType): Record<string, any> {\n  const type = getMarkType(typeOrName, state.schema)\n  const { from, to, empty } = state.selection\n  const marks: Mark[] = []\n\n  if (empty) {\n    if (state.storedMarks) {\n      marks.push(...state.storedMarks)\n    }\n\n    marks.push(...state.selection.$head.marks())\n  } else {\n    state.doc.nodesBetween(from, to, node => {\n      marks.push(...node.marks)\n    })\n  }\n\n  const mark = marks.find(markItem => markItem.type.name === type.name)\n\n  if (!mark) {\n    return {}\n  }\n\n  return { ...mark.attrs }\n}\n", "import { Node, NodeType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\n\nimport { getNodeType } from './getNodeType'\n\nexport function getNodeAttributes(state: EditorState, typeOrName: string | NodeType): Record<string, any> {\n  const type = getNodeType(typeOrName, state.schema)\n  const { from, to } = state.selection\n  const nodes: Node[] = []\n\n  state.doc.nodesBetween(from, to, node => {\n    nodes.push(node)\n  })\n\n  const node = nodes\n    .reverse()\n    .find(nodeItem => nodeItem.type.name === type.name)\n\n  if (!node) {\n    return {}\n  }\n\n  return { ...node.attrs }\n}\n", "import { MarkType, NodeType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\n\nimport { getMarkAttributes } from './getMarkAttributes'\nimport { getNodeAttributes } from './getNodeAttributes'\nimport { getSchemaTypeNameByName } from './getSchemaTypeNameByName'\n\nexport function getAttributes(\n  state: EditorState,\n  typeOrName: string | NodeType | MarkType,\n): Record<string, any> {\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (schemaType === 'node') {\n    return getNodeAttributes(state, typeOrName as NodeType)\n  }\n\n  if (schemaType === 'mark') {\n    return getMarkAttributes(state, typeOrName as MarkType)\n  }\n\n  return {}\n}\n", "/**\n * Removes duplicated values within an array.\n * Supports numbers, strings and objects.\n */\nexport function removeDuplicates<T>(array: T[], by = JSON.stringify): T[] {\n  const seen: Record<any, any> = {}\n\n  return array.filter(item => {\n    const key = by(item)\n\n    return Object.prototype.hasOwnProperty.call(seen, key)\n      ? false\n      : (seen[key] = true)\n  })\n}\n", "import { Step, Transform } from 'prosemirror-transform'\n\nimport { Range } from '../types'\nimport { removeDuplicates } from '../utilities/removeDuplicates'\n\nexport type ChangedRange = {\n  oldRange: Range,\n  newRange: Range,\n}\n\n/**\n * Removes duplicated ranges and ranges that are\n * fully captured by other ranges.\n */\nfunction simplifyChangedRanges(changes: ChangedRange[]): ChangedRange[] {\n  const uniqueChanges = removeDuplicates(changes)\n\n  return uniqueChanges.length === 1\n    ? uniqueChanges\n    : uniqueChanges.filter((change, index) => {\n      const rest = uniqueChanges.filter((_, i) => i !== index)\n\n      return !rest.some(otherChange => {\n        return change.oldRange.from >= otherChange.oldRange.from\n          && change.oldRange.to <= otherChange.oldRange.to\n          && change.newRange.from >= otherChange.newRange.from\n          && change.newRange.to <= otherChange.newRange.to\n      })\n    })\n}\n\n/**\n * Returns a list of changed ranges\n * based on the first and last state of all steps.\n */\nexport function getChangedRanges(transform: Transform): ChangedRange[] {\n  const { mapping, steps } = transform\n  const changes: ChangedRange[] = []\n\n  mapping.maps.forEach((stepMap, index) => {\n    const ranges: Range[] = []\n\n    // This accounts for step changes where no range was actually altered\n    // e.g. when setting a mark, node attribute, etc.\n    // @ts-ignore\n    if (!stepMap.ranges.length) {\n      const { from, to } = steps[index] as Step & {\n        from?: number,\n        to?: number,\n      }\n\n      if (from === undefined || to === undefined) {\n        return\n      }\n\n      ranges.push({ from, to })\n    } else {\n      stepMap.forEach((from, to) => {\n        ranges.push({ from, to })\n      })\n    }\n\n    ranges.forEach(({ from, to }) => {\n      const newStart = mapping.slice(index).map(from, -1)\n      const newEnd = mapping.slice(index).map(to)\n      const oldStart = mapping.invert().map(newStart, -1)\n      const oldEnd = mapping.invert().map(newEnd)\n\n      changes.push({\n        oldRange: {\n          from: oldStart,\n          to: oldEnd,\n        },\n        newRange: {\n          from: newStart,\n          to: newEnd,\n        },\n      })\n    })\n  })\n\n  return simplifyChangedRanges(changes)\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { JSONContent } from '../types'\n\ninterface DebugJSONContent extends JSONContent {\n  from: number,\n  to: number,\n}\n\nexport function getDebugJSON(node: ProseMirrorNode, startOffset = 0): DebugJSONContent {\n  const isTopNode = node.type === node.type.schema.topNodeType\n  const increment = isTopNode ? 0 : 1\n  const from = startOffset\n  const to = from + node.nodeSize\n  const marks = node.marks.map(mark => {\n    const output: { type: string, attrs?: Record<string, any> } = {\n      type: mark.type.name,\n    }\n\n    if (Object.keys(mark.attrs).length) {\n      output.attrs = { ...mark.attrs }\n    }\n\n    return output\n  })\n  const attrs = { ...node.attrs }\n  const output: DebugJSONContent = {\n    type: node.type.name,\n    from,\n    to,\n  }\n\n  if (Object.keys(attrs).length) {\n    output.attrs = attrs\n  }\n\n  if (marks.length) {\n    output.marks = marks\n  }\n\n  if (node.content.childCount) {\n    output.content = []\n\n    node.forEach((child, offset) => {\n      output.content?.push(getDebugJSON(child, startOffset + offset + increment))\n    })\n  }\n\n  if (node.text) {\n    output.text = node.text\n  }\n\n  return output\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nimport { MarkRange } from '../types'\nimport { getMarkRange } from './getMarkRange'\n\nexport function getMarksBetween(from: number, to: number, doc: ProseMirrorNode): MarkRange[] {\n  const marks: MarkRange[] = []\n\n  // get all inclusive marks on empty selection\n  if (from === to) {\n    doc\n      .resolve(from)\n      .marks()\n      .forEach(mark => {\n        const $pos = doc.resolve(from - 1)\n        const range = getMarkRange($pos, mark.type)\n\n        if (!range) {\n          return\n        }\n\n        marks.push({\n          mark,\n          ...range,\n        })\n      })\n  } else {\n    doc.nodesBetween(from, to, (node, pos) => {\n      marks.push(...node.marks.map(mark => ({\n        from: pos,\n        to: pos + node.nodeSize,\n        mark,\n      })))\n    })\n  }\n\n  return marks\n}\n", "import { MarkType } from 'prosemirror-model'\nimport { EditorState } from 'prosemirror-state'\n\nimport { MarkRange } from '../types'\nimport { objectIncludes } from '../utilities/objectIncludes'\nimport { getMarkType } from './getMarkType'\n\nexport function isMarkActive(\n  state: EditorState,\n  typeOrName: MarkType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { empty, ranges } = state.selection\n  const type = typeOrName\n    ? getMarkType(typeOrName, state.schema)\n    : null\n\n  if (empty) {\n    return !!(state.storedMarks || state.selection.$from.marks())\n      .filter(mark => {\n        if (!type) {\n          return true\n        }\n\n        return type.name === mark.type.name\n      })\n      .find(mark => objectIncludes(mark.attrs, attributes, { strict: false }))\n  }\n\n  let selectionRange = 0\n  const markRanges: MarkRange[] = []\n\n  ranges.forEach(({ $from, $to }) => {\n    const from = $from.pos\n    const to = $to.pos\n\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (!node.isText && !node.marks.length) {\n        return\n      }\n\n      const relativeFrom = Math.max(from, pos)\n      const relativeTo = Math.min(to, pos + node.nodeSize)\n      const range = relativeTo - relativeFrom\n\n      selectionRange += range\n\n      markRanges.push(...node.marks.map(mark => ({\n        mark,\n        from: relativeFrom,\n        to: relativeTo,\n      })))\n    })\n  })\n\n  if (selectionRange === 0) {\n    return false\n  }\n\n  // calculate range of matched mark\n  const matchedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === markRange.mark.type.name\n    })\n    .filter(markRange => objectIncludes(markRange.mark.attrs, attributes, { strict: false }))\n    .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0)\n\n  // calculate range of marks that excludes the searched mark\n  // for example `code` doesn’t allow any other marks\n  const excludedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return markRange.mark.type !== type\n        && markRange.mark.type.excludes(type)\n    })\n    .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0)\n\n  // we only include the result of `excludedRange`\n  // if there is a match at all\n  const range = matchedRange > 0\n    ? matchedRange + excludedRange\n    : matchedRange\n\n  return range >= selectionRange\n}\n", "import { EditorState } from 'prosemirror-state'\n\nimport { getSchemaTypeNameByName } from './getSchemaTypeNameByName'\nimport { isMarkActive } from './isMarkActive'\nimport { isNodeActive } from './isNodeActive'\n\nexport function isActive(state: EditorState, name: string | null, attributes: Record<string, any> = {}): boolean {\n  if (!name) {\n    return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes)\n  }\n\n  const schemaType = getSchemaTypeNameByName(name, state.schema)\n\n  if (schemaType === 'node') {\n    return isNodeActive(state, name, attributes)\n  }\n\n  if (schemaType === 'mark') {\n    return isMarkActive(state, name, attributes)\n  }\n\n  return false\n}\n", "import { NodeConfig } from '..'\nimport { getExtensionField } from '../helpers/getExtensionField'\nimport { Extensions } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\nimport { splitExtensions } from './splitExtensions'\n\nexport function isList(name: string, extensions: Extensions): boolean {\n  const { nodeExtensions } = splitExtensions(extensions)\n  const extension = nodeExtensions.find(item => item.name === name)\n\n  if (!extension) {\n    return false\n  }\n\n  const context = {\n    name: extension.name,\n    options: extension.options,\n    storage: extension.storage,\n  }\n  const group = callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context))\n\n  if (typeof group !== 'string') {\n    return false\n  }\n\n  return group.split(' ').includes('list')\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\n\nexport function isNodeEmpty(node: ProseMirrorNode): boolean {\n  const defaultContent = node.type.createAndFill()?.toJSON()\n  const content = node.toJSON()\n\n  return JSON.stringify(defaultContent) === JSON.stringify(content)\n}\n", "import { NodeSelection } from 'prosemirror-state'\n\nexport function isNodeSelection(value: unknown): value is NodeSelection {\n  return value instanceof NodeSelection\n}\n", "import { EditorView } from 'prosemirror-view'\n\nimport { minMax } from '../utilities/minMax'\n\nexport function posToDOMRect(view: EditorView, from: number, to: number): DOMRect {\n  const minPos = 0\n  const maxPos = view.state.doc.content.size\n  const resolvedFrom = minMax(from, minPos, maxPos)\n  const resolvedEnd = minMax(to, minPos, maxPos)\n  const start = view.coordsAtPos(resolvedFrom)\n  const end = view.coordsAtPos(resolvedEnd, -1)\n  const top = Math.min(start.top, end.top)\n  const bottom = Math.max(start.bottom, end.bottom)\n  const left = Math.min(start.left, end.left)\n  const right = Math.max(start.right, end.right)\n  const width = right - left\n  const height = bottom - top\n  const x = left\n  const y = top\n  const data = {\n    top,\n    bottom,\n    left,\n    right,\n    width,\n    height,\n    x,\n    y,\n  }\n\n  return {\n    ...data,\n    toJSON: () => data,\n  }\n}\n", "import { MarkType, ResolvedPos } from 'prosemirror-model'\nimport { EditorState, Transaction } from 'prosemirror-state'\n\nimport { isTextSelection } from '../helpers'\nimport { getMarkAttributes } from '../helpers/getMarkAttributes'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setMark: {\n      /**\n       * Add a mark with new attributes.\n       */\n      setMark: (typeOrName: string | MarkType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nfunction canSetMark(state: EditorState, tr: Transaction, newMarkType: MarkType) {\n  const { selection } = tr\n  let cursor: ResolvedPos | null = null\n\n  if (isTextSelection(selection)) {\n    cursor = selection.$cursor\n  }\n\n  if (cursor) {\n    const currentMarks = state.storedMarks ?? cursor.marks()\n\n    // There can be no current marks that exclude the new mark\n    return !!newMarkType.isInSet(currentMarks) || !currentMarks.some(mark => mark.type.excludes(newMarkType))\n  }\n\n  const { ranges } = selection\n\n  return ranges.some(({ $from, $to }) => {\n    let someNodeSupportsMark = $from.depth === 0 ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType) : false\n\n    state.doc.nodesBetween($from.pos, $to.pos, (node, _pos, parent) => {\n      // If we already found a mark that we can enable, return false to bypass the remaining search\n      if (someNodeSupportsMark) {\n        return false\n      }\n\n      if (node.isInline) {\n        const parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType)\n        const currentMarksAllowMarkType = !!newMarkType.isInSet(node.marks) || !node.marks.some(otherMark => otherMark.type.excludes(newMarkType))\n\n        someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType\n      }\n      return !someNodeSupportsMark\n    })\n\n    return someNodeSupportsMark\n  })\n\n}\nexport const setMark: RawCommands['setMark'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n  const type = getMarkType(typeOrName, state.schema)\n\n  if (dispatch) {\n    if (empty) {\n      const oldAttributes = getMarkAttributes(state, type)\n\n      tr.addStoredMark(type.create({\n        ...oldAttributes,\n        ...attributes,\n      }))\n    } else {\n      ranges.forEach(range => {\n        const from = range.$from.pos\n        const to = range.$to.pos\n\n        state.doc.nodesBetween(from, to, (node, pos) => {\n          const trimmedFrom = Math.max(pos, from)\n          const trimmedTo = Math.min(pos + node.nodeSize, to)\n          const someHasMark = node.marks.find(mark => mark.type === type)\n\n          // if there is already a mark of this type\n          // we know that we have to merge its attributes\n          // otherwise we add a fresh new mark\n          if (someHasMark) {\n\n            node.marks.forEach(mark => {\n              if (type === mark.type) {\n                tr.addMark(trimmedFrom, trimmedTo, type.create({\n                  ...mark.attrs,\n                  ...attributes,\n                }))\n              }\n            })\n          } else {\n            tr.addMark(trimmedFrom, trimmedTo, type.create(attributes))\n          }\n        })\n      })\n    }\n  }\n\n  return canSetMark(state, tr, type)\n}\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setMeta: {\n      /**\n       * Store a metadata property in the current transaction.\n       */\n      setMeta: (key: string, value: any) => ReturnType,\n    }\n  }\n}\n\nexport const setMeta: RawCommands['setMeta'] = (key, value) => ({ tr }) => {\n  tr.setMeta(key, value)\n\n  return true\n}\n", "import { setBlockType } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setNode: {\n      /**\n       * Replace a given range with a node.\n       */\n      setNode: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const setNode: RawCommands['setNode'] = (typeOrName, attributes = {}) => ({ state, dispatch, chain }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  // TODO: use a fallback like insertContent?\n  if (!type.isTextblock) {\n    console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.')\n\n    return false\n  }\n\n  return chain()\n    // try to convert node to default node if needed\n    .command(({ commands }) => {\n      const canSetBlock = setBlockType(type, attributes)(state)\n\n      if (canSetBlock) {\n        return true\n      }\n\n      return commands.clearNodes()\n    })\n    .command(({ state: updatedState }) => {\n      return setBlockType(type, attributes)(updatedState, dispatch)\n    })\n    .run()\n}\n", "import { NodeSelection } from 'prosemirror-state'\n\nimport { RawCommands } from '../types'\nimport { minMax } from '../utilities/minMax'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setNodeSelection: {\n      /**\n       * Creates a NodeSelection.\n       */\n      setNodeSelection: (position: number) => ReturnType,\n    }\n  }\n}\n\nexport const setNodeSelection: RawCommands['setNodeSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const from = minMax(position, 0, doc.content.size)\n    const selection = NodeSelection.create(doc, from)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n", "import { TextSelection } from 'prosemirror-state'\n\nimport { Range, RawCommands } from '../types'\nimport { minMax } from '../utilities/minMax'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setTextSelection: {\n      /**\n       * Creates a TextSelection.\n       */\n      setTextSelection: (position: number | Range) => ReturnType,\n    }\n  }\n}\n\nexport const setTextSelection: RawCommands['setTextSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const { from, to } = typeof position === 'number'\n      ? { from: position, to: position }\n      : position\n    const minPos = TextSelection.atStart(doc).from\n    const maxPos = TextSelection.atEnd(doc).to\n    const resolvedFrom = minMax(from, minPos, maxPos)\n    const resolvedEnd = minMax(to, minPos, maxPos)\n    const selection = TextSelection.create(doc, resolvedFrom, resolvedEnd)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n", "import { NodeType } from 'prosemirror-model'\nimport { sinkListItem as originalSinkListItem } from 'prosemirror-schema-list'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    sinkListItem: {\n      /**\n       * Sink the list item down into an inner list.\n       */\n      sinkListItem: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const sinkListItem: RawCommands['sinkListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalSinkListItem(type)(state, dispatch)\n}\n", "import { ExtensionAttribute } from '../types'\n\nexport function getSplittedAttributes(\n  extensionAttributes: ExtensionAttribute[],\n  typeName: string,\n  attributes: Record<string, any>,\n): Record<string, any> {\n  return Object.fromEntries(Object\n    .entries(attributes)\n    .filter(([name]) => {\n      const extensionAttribute = extensionAttributes.find(item => {\n        return item.type === typeName && item.name === name\n      })\n\n      if (!extensionAttribute) {\n        return false\n      }\n\n      return extensionAttribute.attribute.keepOnSplit\n    }))\n}\n", "import { EditorState, NodeSelection, TextSelection } from 'prosemirror-state'\nimport { canSplit } from 'prosemirror-transform'\n\nimport { defaultBlockAt } from '../helpers/defaultBlockAt'\nimport { getSplittedAttributes } from '../helpers/getSplittedAttributes'\nimport { RawCommands } from '../types'\n\nfunction ensureMarks(state: EditorState, splittableMarks?: string[]) {\n  const marks = state.storedMarks\n    || (state.selection.$to.parentOffset && state.selection.$from.marks())\n\n  if (marks) {\n    const filteredMarks = marks.filter(mark => splittableMarks?.includes(mark.type.name))\n\n    state.tr.ensureMarks(filteredMarks)\n  }\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    splitBlock: {\n      /**\n       * Forks a new node from an existing node.\n       */\n      splitBlock: (options?: { keepMarks?: boolean }) => ReturnType,\n    }\n  }\n}\n\nexport const splitBlock: RawCommands['splitBlock'] = ({ keepMarks = true } = {}) => ({\n  tr,\n  state,\n  dispatch,\n  editor,\n}) => {\n  const { selection, doc } = tr\n  const { $from, $to } = selection\n  const extensionAttributes = editor.extensionManager.attributes\n  const newAttributes = getSplittedAttributes(\n    extensionAttributes,\n    $from.node().type.name,\n    $from.node().attrs,\n  )\n\n  if (selection instanceof NodeSelection && selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(doc, $from.pos)) {\n      return false\n    }\n\n    if (dispatch) {\n      if (keepMarks) {\n        ensureMarks(state, editor.extensionManager.splittableMarks)\n      }\n\n      tr.split($from.pos).scrollIntoView()\n    }\n\n    return true\n  }\n\n  if (!$from.parent.isBlock) {\n    return false\n  }\n\n  if (dispatch) {\n    const atEnd = $to.parentOffset === $to.parent.content.size\n\n    if (selection instanceof TextSelection) {\n      tr.deleteSelection()\n    }\n\n    const deflt = $from.depth === 0\n      ? undefined\n      : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)))\n\n    let types = atEnd && deflt\n      ? [{\n        type: deflt,\n        attrs: newAttributes,\n      }]\n      : undefined\n\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types)\n\n    if (\n      !types\n      && !can\n      && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)\n    ) {\n      can = true\n      types = deflt\n        ? [{\n          type: deflt,\n          attrs: newAttributes,\n        }]\n        : undefined\n    }\n\n    if (can) {\n      tr.split(tr.mapping.map($from.pos), 1, types)\n\n      if (\n        deflt\n        && !atEnd\n        && !$from.parentOffset\n        && $from.parent.type !== deflt\n      ) {\n        const first = tr.mapping.map($from.before())\n        const $first = tr.doc.resolve(first)\n\n        if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n          tr.setNodeMarkup(tr.mapping.map($from.before()), deflt)\n        }\n      }\n    }\n\n    if (keepMarks) {\n      ensureMarks(state, editor.extensionManager.splittableMarks)\n    }\n\n    tr.scrollIntoView()\n  }\n\n  return true\n}\n", "import {\n  Fragment,\n  Node as ProseMirrorNode,\n  NodeType,\n  Slice,\n} from 'prosemirror-model'\nimport { TextSelection } from 'prosemirror-state'\nimport { canSplit } from 'prosemirror-transform'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { getSplittedAttributes } from '../helpers/getSplittedAttributes'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    splitListItem: {\n      /**\n       * Splits one list item into two list items.\n       */\n      splitListItem: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const splitListItem: RawCommands['splitListItem'] = typeOrName => ({\n  tr, state, dispatch, editor,\n}) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const { $from, $to } = state.selection\n\n  // @ts-ignore\n  // eslint-disable-next-line\n  const node: ProseMirrorNode = state.selection.node\n\n  if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) {\n    return false\n  }\n\n  const grandParent = $from.node(-1)\n\n  if (grandParent.type !== type) {\n    return false\n  }\n\n  const extensionAttributes = editor.extensionManager.attributes\n\n  if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n    // In an empty block. If this is a nested list, the wrapping\n    // list item should be split. Otherwise, bail out and let next\n    // command handle lifting.\n    if (\n      $from.depth === 2\n      || $from.node(-3).type !== type\n      || $from.index(-2) !== $from.node(-2).childCount - 1\n    ) {\n      return false\n    }\n\n    if (dispatch) {\n      let wrap = Fragment.empty\n      // eslint-disable-next-line\n      const depthBefore = $from.index(-1)\n        ? 1\n        : $from.index(-2)\n          ? 2\n          : 3\n\n      // Build a fragment containing empty versions of the structure\n      // from the outer list item to the parent node of the cursor\n      for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {\n        wrap = Fragment.from($from.node(d).copy(wrap))\n      }\n\n      // eslint-disable-next-line\n      const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount\n        ? 1\n        : $from.indexAfter(-2) < $from.node(-3).childCount\n          ? 2\n          : 3\n\n      // Add a second list item with an empty default start node\n      const newNextTypeAttributes = getSplittedAttributes(\n        extensionAttributes,\n        $from.node().type.name,\n        $from.node().attrs,\n      )\n      const nextType = type.contentMatch.defaultType?.createAndFill(newNextTypeAttributes) || undefined\n\n      wrap = wrap.append(Fragment.from(type.createAndFill(null, nextType) || undefined))\n\n      const start = $from.before($from.depth - (depthBefore - 1))\n\n      tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0))\n\n      let sel = -1\n\n      tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {\n        if (sel > -1) {\n          return false\n        }\n\n        if (n.isTextblock && n.content.size === 0) {\n          sel = pos + 1\n        }\n      })\n\n      if (sel > -1) {\n        tr.setSelection(TextSelection.near(tr.doc.resolve(sel)))\n      }\n\n      tr.scrollIntoView()\n    }\n\n    return true\n  }\n\n  const nextType = $to.pos === $from.end()\n    ? grandParent.contentMatchAt(0).defaultType\n    : null\n\n  const newTypeAttributes = getSplittedAttributes(\n    extensionAttributes,\n    grandParent.type.name,\n    grandParent.attrs,\n  )\n  const newNextTypeAttributes = getSplittedAttributes(\n    extensionAttributes,\n    $from.node().type.name,\n    $from.node().attrs,\n  )\n\n  tr.delete($from.pos, $to.pos)\n\n  const types = nextType\n    ? [{ type, attrs: newTypeAttributes }, { type: nextType, attrs: newNextTypeAttributes }]\n    : [{ type, attrs: newTypeAttributes }]\n\n  if (!canSplit(tr.doc, $from.pos, 2)) {\n    return false\n  }\n\n  if (dispatch) {\n    tr.split($from.pos, 2, types).scrollIntoView()\n  }\n\n  return true\n}\n", "import { NodeType } from 'prosemirror-model'\nimport { Transaction } from 'prosemirror-state'\nimport { canJoin } from 'prosemirror-transform'\n\nimport { findParentNode } from '../helpers/findParentNode'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { isList } from '../helpers/isList'\nimport { RawCommands } from '../types'\n\nconst joinListBackwards = (tr: Transaction, listType: NodeType): boolean => {\n  const list = findParentNode(node => node.type === listType)(tr.selection)\n\n  if (!list) {\n    return true\n  }\n\n  const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth)\n\n  if (before === undefined) {\n    return true\n  }\n\n  const nodeBefore = tr.doc.nodeAt(before)\n  const canJoinBackwards = list.node.type === nodeBefore?.type\n    && canJoin(tr.doc, list.pos)\n\n  if (!canJoinBackwards) {\n    return true\n  }\n\n  tr.join(list.pos)\n\n  return true\n}\n\nconst joinListForwards = (tr: Transaction, listType: NodeType): boolean => {\n  const list = findParentNode(node => node.type === listType)(tr.selection)\n\n  if (!list) {\n    return true\n  }\n\n  const after = tr.doc.resolve(list.start).after(list.depth)\n\n  if (after === undefined) {\n    return true\n  }\n\n  const nodeAfter = tr.doc.nodeAt(after)\n  const canJoinForwards = list.node.type === nodeAfter?.type\n    && canJoin(tr.doc, after)\n\n  if (!canJoinForwards) {\n    return true\n  }\n\n  tr.join(after)\n\n  return true\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleList: {\n      /**\n       * Toggle between different list types.\n       */\n      toggleList: (listTypeOrName: string | NodeType, itemTypeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const toggleList: RawCommands['toggleList'] = (listTypeOrName, itemTypeOrName) => ({\n  editor, tr, state, dispatch, chain, commands, can,\n}) => {\n  const { extensions } = editor.extensionManager\n  const listType = getNodeType(listTypeOrName, state.schema)\n  const itemType = getNodeType(itemTypeOrName, state.schema)\n  const { selection } = state\n  const { $from, $to } = selection\n  const range = $from.blockRange($to)\n\n  if (!range) {\n    return false\n  }\n\n  const parentList = findParentNode(node => isList(node.type.name, extensions))(selection)\n\n  if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n    // remove list\n    if (parentList.node.type === listType) {\n      return commands.liftListItem(itemType)\n    }\n\n    // change list type\n    if (\n      isList(parentList.node.type.name, extensions)\n      && listType.validContent(parentList.node.content)\n      && dispatch\n    ) {\n      return chain()\n        .command(() => {\n          tr.setNodeMarkup(parentList.pos, listType)\n\n          return true\n        })\n        .command(() => joinListBackwards(tr, listType))\n        .command(() => joinListForwards(tr, listType))\n        .run()\n    }\n  }\n\n  return chain()\n    // try to convert node to default node if needed\n    .command(() => {\n      const canWrapInList = can().wrapInList(listType)\n\n      if (canWrapInList) {\n        return true\n      }\n\n      return commands.clearNodes()\n    })\n    .wrapInList(listType)\n    .command(() => joinListBackwards(tr, listType))\n    .command(() => joinListForwards(tr, listType))\n    .run()\n}\n", "import { MarkType } from 'prosemirror-model'\n\nimport { getMarkType } from '../helpers/getMarkType'\nimport { isMarkActive } from '../helpers/isMarkActive'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleMark: {\n      /**\n       * Toggle a mark on and off.\n       */\n      toggleMark: (\n        typeOrName: string | MarkType,\n        attributes?: Record<string, any>,\n        options?: {\n          /**\n           * Removes the mark even across the current selection. Defaults to `false`.\n           */\n          extendEmptyMarkRange?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const toggleMark: RawCommands['toggleMark'] = (typeOrName, attributes = {}, options = {}) => ({ state, commands }) => {\n  const { extendEmptyMarkRange = false } = options\n  const type = getMarkType(typeOrName, state.schema)\n  const isActive = isMarkActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.unsetMark(type, { extendEmptyMarkRange })\n  }\n\n  return commands.setMark(type, attributes)\n}\n", "import { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { isNodeActive } from '../helpers/isNodeActive'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleNode: {\n      /**\n       * Toggle a node with another node.\n       */\n      toggleNode: (typeOrName: string | NodeType, toggleTypeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const toggleNode: RawCommands['toggleNode'] = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const toggleType = getNodeType(toggleTypeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.setNode(toggleType)\n  }\n\n  return commands.setNode(type, attributes)\n}\n", "import { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { isNodeActive } from '../helpers/isNodeActive'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleWrap: {\n      /**\n       * Wraps nodes in another node, or removes an existing wrap.\n       */\n      toggleWrap: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const toggleWrap: RawCommands['toggleWrap'] = (typeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.lift(type)\n  }\n\n  return commands.wrapIn(type, attributes)\n}\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    undoInputRule: {\n      /**\n       * Undo an input rule.\n       */\n      undoInputRule: () => ReturnType,\n    }\n  }\n}\n\nexport const undoInputRule: RawCommands['undoInputRule'] = () => ({ state, dispatch }) => {\n  const plugins = state.plugins\n\n  for (let i = 0; i < plugins.length; i += 1) {\n    const plugin = plugins[i]\n    let undoable\n\n    // @ts-ignore\n    // eslint-disable-next-line\n    if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n      if (dispatch) {\n        const tr = state.tr\n        const toUndo = undoable.transform\n\n        for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {\n          tr.step(toUndo.steps[j].invert(toUndo.docs[j]))\n        }\n\n        if (undoable.text) {\n          const marks = tr.doc.resolve(undoable.from).marks()\n\n          tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks))\n        } else {\n          tr.delete(undoable.from, undoable.to)\n        }\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n", "import { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    unsetAllMarks: {\n      /**\n       * Remove all marks in the current selection.\n       */\n      unsetAllMarks: () => ReturnType,\n    }\n  }\n}\n\nexport const unsetAllMarks: RawCommands['unsetAllMarks'] = () => ({ tr, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n\n  if (empty) {\n    return true\n  }\n\n  if (dispatch) {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos)\n    })\n  }\n\n  return true\n}\n", "import { MarkType } from 'prosemirror-model'\n\nimport { getMarkRange } from '../helpers/getMarkRange'\nimport { getMarkType } from '../helpers/getMarkType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    unsetMark: {\n      /**\n       * Remove all marks in the current selection.\n       */\n      unsetMark: (\n        typeOrName: string | MarkType,\n        options?: {\n          /**\n           * Removes the mark even across the current selection. Defaults to `false`.\n           */\n          extendEmptyMarkRange?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const unsetMark: RawCommands['unsetMark'] = (typeOrName, options = {}) => ({ tr, state, dispatch }) => {\n  const { extendEmptyMarkRange = false } = options\n  const { selection } = tr\n  const type = getMarkType(typeOrName, state.schema)\n  const { $from, empty, ranges } = selection\n\n  if (!dispatch) {\n    return true\n  }\n\n  if (empty && extendEmptyMarkRange) {\n    let { from, to } = selection\n    const attrs = $from.marks().find(mark => mark.type === type)?.attrs\n    const range = getMarkRange($from, type, attrs)\n\n    if (range) {\n      from = range.from\n      to = range.to\n    }\n\n    tr.removeMark(from, to, type)\n  } else {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos, type)\n    })\n  }\n\n  tr.removeStoredMark(type)\n\n  return true\n}\n", "import { MarkType, NodeType } from 'prosemirror-model'\n\nimport { getMarkType } from '../helpers/getMarkType'\nimport { getNodeType } from '../helpers/getNodeType'\nimport { getSchemaTypeNameByName } from '../helpers/getSchemaTypeNameByName'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    updateAttributes: {\n      /**\n       * Update attributes of a node or mark.\n       */\n      updateAttributes: (typeOrName: string | NodeType | MarkType, attributes: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const updateAttributes: RawCommands['updateAttributes'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string'\n      ? typeOrName\n      : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      const from = range.$from.pos\n      const to = range.$to.pos\n\n      state.doc.nodesBetween(from, to, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, {\n            ...node.attrs,\n            ...attributes,\n          })\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              const trimmedFrom = Math.max(pos, from)\n              const trimmedTo = Math.min(pos + node.nodeSize, to)\n\n              tr.addMark(trimmedFrom, trimmedTo, markType.create({\n                ...mark.attrs,\n                ...attributes,\n              }))\n            }\n          })\n        }\n      })\n    })\n  }\n\n  return true\n}\n", "import { wrapIn as originalWrapIn } from 'prosemirror-commands'\nimport { NodeType } from 'prosemirror-model'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    wrapIn: {\n      /**\n       * Wraps nodes in another node.\n       */\n      wrapIn: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const wrapIn: RawCommands['wrapIn'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalWrapIn(type, attributes)(state, dispatch)\n}\n", "import { NodeType } from 'prosemirror-model'\nimport { wrapInList as originalWrapInList } from 'prosemirror-schema-list'\n\nimport { getNodeType } from '../helpers/getNodeType'\nimport { RawCommands } from '../types'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    wrapInList: {\n      /**\n       * Wrap a node in a list.\n       */\n      wrapInList: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType,\n    }\n  }\n}\n\nexport const wrapInList: RawCommands['wrapInList'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalWrapInList(type, attributes)(state, dispatch)\n}\n", "import * as commands from '../commands'\nimport { Extension } from '../Extension'\n\nexport * from '../commands'\n\nexport const Commands = Extension.create({\n  name: 'commands',\n\n  addCommands() {\n    return {\n      ...commands,\n    }\n  },\n})\n", "import { Plugin, PluginKey } from 'prosemirror-state'\n\nimport { Extension } from '../Extension'\n\nexport const Editable = Extension.create({\n  name: 'editable',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('editable'),\n        props: {\n          editable: () => this.editor.options.editable,\n        },\n      }),\n    ]\n  },\n})\n", "import { Plugin, PluginKey } from 'prosemirror-state'\n\nimport { Extension } from '../Extension'\n\nexport const FocusEvents = Extension.create({\n  name: 'focusEvents',\n\n  addProseMirrorPlugins() {\n    const { editor } = this\n\n    return [\n      new Plugin({\n        key: new PluginKey('focusEvents'),\n        props: {\n          handleDOMEvents: {\n            focus: (view, event: Event) => {\n              editor.isFocused = true\n\n              const transaction = editor.state.tr\n                .setMeta('focus', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n            blur: (view, event: Event) => {\n              editor.isFocused = false\n\n              const transaction = editor.state.tr\n                .setMeta('blur', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n          },\n        },\n      }),\n    ]\n  },\n})\n", "import { Plugin, PluginKey, Selection } from 'prosemirror-state'\n\nimport { CommandManager } from '../CommandManager'\nimport { Extension } from '../Extension'\nimport { createChainableState } from '../helpers/createChainableState'\nimport { isiOS } from '../utilities/isiOS'\nimport { isMacOS } from '../utilities/isMacOS'\n\nexport const Keymap = Extension.create({\n  name: 'keymap',\n\n  addKeyboardShortcuts() {\n    const handleBackspace = () => this.editor.commands.first(({ commands }) => [\n      () => commands.undoInputRule(),\n      // maybe convert first text block node to default node\n      () => commands.command(({ tr }) => {\n        const { selection, doc } = tr\n        const { empty, $anchor } = selection\n        const { pos, parent } = $anchor\n        const isAtStart = Selection.atStart(doc).from === pos\n\n        if (\n          !empty\n          || !isAtStart\n          || !parent.type.isTextblock\n          || parent.textContent.length\n        ) {\n          return false\n        }\n\n        return commands.clearNodes()\n      }),\n      () => commands.deleteSelection(),\n      () => commands.joinBackward(),\n      () => commands.selectNodeBackward(),\n    ])\n\n    const handleDelete = () => this.editor.commands.first(({ commands }) => [\n      () => commands.deleteSelection(),\n      () => commands.joinForward(),\n      () => commands.selectNodeForward(),\n    ])\n\n    const handleEnter = () => this.editor.commands.first(({ commands }) => [\n      () => commands.newlineInCode(),\n      () => commands.createParagraphNear(),\n      () => commands.liftEmptyBlock(),\n      () => commands.splitBlock(),\n    ])\n\n    const baseKeymap = {\n      Enter: handleEnter,\n      'Mod-Enter': () => this.editor.commands.exitCode(),\n      Backspace: handleBackspace,\n      'Mod-Backspace': handleBackspace,\n      'Shift-Backspace': handleBackspace,\n      Delete: handleDelete,\n      'Mod-Delete': handleDelete,\n      'Mod-a': () => this.editor.commands.selectAll(),\n    }\n\n    const pcKeymap = {\n      ...baseKeymap,\n    }\n\n    const macKeymap = {\n      ...baseKeymap,\n      'Ctrl-h': handleBackspace,\n      'Alt-Backspace': handleBackspace,\n      'Ctrl-d': handleDelete,\n      'Ctrl-Alt-Backspace': handleDelete,\n      'Alt-Delete': handleDelete,\n      'Alt-d': handleDelete,\n      'Ctrl-a': () => this.editor.commands.selectTextblockStart(),\n      'Ctrl-e': () => this.editor.commands.selectTextblockEnd(),\n    }\n\n    if (isiOS() || isMacOS()) {\n      return macKeymap\n    }\n\n    return pcKeymap\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      // With this plugin we check if the whole document was selected and deleted.\n      // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n      // to a paragraph if necessary.\n      // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\n      // with many other commands.\n      new Plugin({\n        key: new PluginKey('clearDocument'),\n        appendTransaction: (transactions, oldState, newState) => {\n          const docChanges = transactions.some(transaction => transaction.docChanged)\n            && !oldState.doc.eq(newState.doc)\n\n          if (!docChanges) {\n            return\n          }\n\n          const { empty, from, to } = oldState.selection\n          const allFrom = Selection.atStart(oldState.doc).from\n          const allEnd = Selection.atEnd(oldState.doc).to\n          const allWasSelected = from === allFrom && to === allEnd\n          const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, ' ', ' ').length === 0\n\n          if (empty || !allWasSelected || !isEmpty) {\n            return\n          }\n\n          const tr = newState.tr\n          const state = createChainableState({\n            state: newState,\n            transaction: tr,\n          })\n          const { commands } = new CommandManager({\n            editor: this.editor,\n            state,\n          })\n\n          commands.clearNodes()\n\n          if (!tr.steps.length) {\n            return\n          }\n\n          return tr\n        },\n      }),\n    ]\n  },\n})\n", "import { Plugin, PluginKey } from 'prosemirror-state'\n\nimport { Extension } from '../Extension'\n\nexport const Tabindex = Extension.create({\n  name: 'tabindex',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('tabindex'),\n        props: {\n          attributes: this.editor.isEditable ? { tabindex: '0' } : {},\n        },\n      }),\n    ]\n  },\n})\n", "export const style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: \"liga\" 0; /* the above doesn't seem to work in Edge */\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`\n", "export function createStyleTag(style: string, nonce?: string): HTMLStyleElement {\n  const tipTapStyleTag = (<HTMLStyleElement>document.querySelector('style[data-tiptap-style]'))\n\n  if (tipTapStyleTag !== null) {\n    return tipTapStyleTag\n  }\n\n  const styleNode = document.createElement('style')\n\n  if (nonce) {\n    styleNode.setAttribute('nonce', nonce)\n  }\n\n  styleNode.setAttribute('data-tiptap-style', '')\n  styleNode.innerHTML = style\n  document.getElementsByTagName('head')[0].appendChild(styleNode)\n\n  return styleNode\n}\n", "import { MarkType, NodeType, Schema } from 'prosemirror-model'\nimport {\n  EditorState,\n  Plugin,\n  PluginKey,\n  Transaction,\n} from 'prosemirror-state'\nimport { EditorView } from 'prosemirror-view'\n\nimport { CommandManager } from './CommandManager'\nimport { EventEmitter } from './EventEmitter'\nimport { ExtensionManager } from './ExtensionManager'\nimport * as extensions from './extensions'\nimport { createDocument } from './helpers/createDocument'\nimport { getAttributes } from './helpers/getAttributes'\nimport { getHTMLFromFragment } from './helpers/getHTMLFromFragment'\nimport { getText } from './helpers/getText'\nimport { getTextSerializersFromSchema } from './helpers/getTextSerializersFromSchema'\nimport { isActive } from './helpers/isActive'\nimport { isNodeEmpty } from './helpers/isNodeEmpty'\nimport { resolveFocusPosition } from './helpers/resolveFocusPosition'\nimport { style } from './style'\nimport {\n  CanCommands,\n  ChainedCommands,\n  EditorEvents,\n  EditorOptions,\n  JSONContent,\n  SingleCommands,\n  TextSerializer,\n} from './types'\nimport { createStyleTag } from './utilities/createStyleTag'\nimport { isFunction } from './utilities/isFunction'\n\nexport { extensions }\n\nexport interface HTMLElement {\n  editor?: Editor\n}\n\nexport class Editor extends EventEmitter<EditorEvents> {\n\n  private commandManager!: CommandManager\n\n  public extensionManager!: ExtensionManager\n\n  private css!: HTMLStyleElement\n\n  public schema!: Schema\n\n  public view!: EditorView\n\n  public isFocused = false\n\n  public extensionStorage: Record<string, any> = {}\n\n  public options: EditorOptions = {\n    element: document.createElement('div'),\n    content: '',\n    injectCSS: true,\n    injectNonce: undefined,\n    extensions: [],\n    autofocus: false,\n    editable: true,\n    editorProps: {},\n    parseOptions: {},\n    enableInputRules: true,\n    enablePasteRules: true,\n    enableCoreExtensions: true,\n    onBeforeCreate: () => null,\n    onCreate: () => null,\n    onUpdate: () => null,\n    onSelectionUpdate: () => null,\n    onTransaction: () => null,\n    onFocus: () => null,\n    onBlur: () => null,\n    onDestroy: () => null,\n  }\n\n  constructor(options: Partial<EditorOptions> = {}) {\n    super()\n    this.setOptions(options)\n    this.createExtensionManager()\n    this.createCommandManager()\n    this.createSchema()\n    this.on('beforeCreate', this.options.onBeforeCreate)\n    this.emit('beforeCreate', { editor: this })\n    this.createView()\n    this.injectCSS()\n    this.on('create', this.options.onCreate)\n    this.on('update', this.options.onUpdate)\n    this.on('selectionUpdate', this.options.onSelectionUpdate)\n    this.on('transaction', this.options.onTransaction)\n    this.on('focus', this.options.onFocus)\n    this.on('blur', this.options.onBlur)\n    this.on('destroy', this.options.onDestroy)\n\n    window.setTimeout(() => {\n      if (this.isDestroyed) {\n        return\n      }\n\n      this.commands.focus(this.options.autofocus)\n      this.emit('create', { editor: this })\n    }, 0)\n  }\n\n  /**\n   * Returns the editor storage.\n   */\n  public get storage(): Record<string, any> {\n    return this.extensionStorage\n  }\n\n  /**\n   * An object of all registered commands.\n   */\n  public get commands(): SingleCommands {\n    return this.commandManager.commands\n  }\n\n  /**\n   * Create a command chain to call multiple commands at once.\n   */\n  public chain(): ChainedCommands {\n    return this.commandManager.chain()\n  }\n\n  /**\n   * Check if a command or a command chain can be executed. Without executing it.\n   */\n  public can(): CanCommands {\n    return this.commandManager.can()\n  }\n\n  /**\n   * Inject CSS styles.\n   */\n  private injectCSS(): void {\n    if (this.options.injectCSS && document) {\n      this.css = createStyleTag(style, this.options.injectNonce)\n    }\n  }\n\n  /**\n   * Update editor options.\n   *\n   * @param options A list of options\n   */\n  public setOptions(options: Partial<EditorOptions> = {}): void {\n    this.options = {\n      ...this.options,\n      ...options,\n    }\n\n    if (!this.view || !this.state || this.isDestroyed) {\n      return\n    }\n\n    if (this.options.editorProps) {\n      this.view.setProps(this.options.editorProps)\n    }\n\n    this.view.updateState(this.state)\n  }\n\n  /**\n   * Update editable state of the editor.\n   */\n  public setEditable(editable: boolean): void {\n    this.setOptions({ editable })\n    this.emit('update', { editor: this, transaction: this.state.tr })\n  }\n\n  /**\n   * Returns whether the editor is editable.\n   */\n  public get isEditable(): boolean {\n    // since plugins are applied after creating the view\n    // `editable` is always `true` for one tick.\n    // that’s why we also have to check for `options.editable`\n    return this.options.editable\n      && this.view\n      && this.view.editable\n  }\n\n  /**\n   * Returns the editor state.\n   */\n  public get state(): EditorState {\n    return this.view.state\n  }\n\n  /**\n   * Register a ProseMirror plugin.\n   *\n   * @param plugin A ProseMirror plugin\n   * @param handlePlugins Control how to merge the plugin into the existing plugins.\n   */\n  public registerPlugin(plugin: Plugin, handlePlugins?: (newPlugin: Plugin, plugins: Plugin[]) => Plugin[]): void {\n    const plugins = isFunction(handlePlugins)\n      ? handlePlugins(plugin, [...this.state.plugins])\n      : [...this.state.plugins, plugin]\n\n    const state = this.state.reconfigure({ plugins })\n\n    this.view.updateState(state)\n  }\n\n  /**\n   * Unregister a ProseMirror plugin.\n   *\n   * @param nameOrPluginKey The plugins name\n   */\n  public unregisterPlugin(nameOrPluginKey: string | PluginKey): void {\n    if (this.isDestroyed) {\n      return\n    }\n\n    const name = typeof nameOrPluginKey === 'string'\n      ? `${nameOrPluginKey}$`\n      // @ts-ignore\n      : nameOrPluginKey.key\n\n    const state = this.state.reconfigure({\n      // @ts-ignore\n      plugins: this.state.plugins.filter(plugin => !plugin.key.startsWith(name)),\n    })\n\n    this.view.updateState(state)\n  }\n\n  /**\n   * Creates an extension manager.\n   */\n  private createExtensionManager(): void {\n    const coreExtensions = this.options.enableCoreExtensions\n      ? Object.values(extensions)\n      : []\n    const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {\n      return ['extension', 'node', 'mark'].includes(extension?.type)\n    })\n\n    this.extensionManager = new ExtensionManager(allExtensions, this)\n  }\n\n  /**\n   * Creates an command manager.\n   */\n  private createCommandManager(): void {\n    this.commandManager = new CommandManager({\n      editor: this,\n    })\n  }\n\n  /**\n   * Creates a ProseMirror schema.\n   */\n  private createSchema(): void {\n    this.schema = this.extensionManager.schema\n  }\n\n  /**\n   * Creates a ProseMirror view.\n   */\n  private createView(): void {\n    const doc = createDocument(this.options.content, this.schema, this.options.parseOptions)\n    const selection = resolveFocusPosition(doc, this.options.autofocus)\n\n    this.view = new EditorView(this.options.element, {\n      ...this.options.editorProps,\n      dispatchTransaction: this.dispatchTransaction.bind(this),\n      state: EditorState.create({\n        doc,\n        selection: selection || undefined,\n      }),\n    })\n\n    // `editor.view` is not yet available at this time.\n    // Therefore we will add all plugins and node views directly afterwards.\n    const newState = this.state.reconfigure({\n      plugins: this.extensionManager.plugins,\n    })\n\n    this.view.updateState(newState)\n\n    this.createNodeViews()\n\n    // Let’s store the editor instance in the DOM element.\n    // So we’ll have access to it for tests.\n    const dom = this.view.dom as HTMLElement\n\n    dom.editor = this\n  }\n\n  /**\n   * Creates all node views.\n   */\n  public createNodeViews(): void {\n    this.view.setProps({\n      nodeViews: this.extensionManager.nodeViews,\n    })\n  }\n\n  public isCapturingTransaction = false\n\n  private capturedTransaction: Transaction | null = null\n\n  public captureTransaction(fn: Function) {\n    this.isCapturingTransaction = true\n    fn()\n    this.isCapturingTransaction = false\n\n    const tr = this.capturedTransaction\n\n    this.capturedTransaction = null\n\n    return tr\n  }\n\n  /**\n   * The callback over which to send transactions (state updates) produced by the view.\n   *\n   * @param transaction An editor state transaction\n   */\n  private dispatchTransaction(transaction: Transaction): void {\n    if (this.isCapturingTransaction) {\n      if (!this.capturedTransaction) {\n        this.capturedTransaction = transaction\n\n        return\n      }\n\n      transaction.steps.forEach(step => this.capturedTransaction?.step(step))\n\n      return\n    }\n\n    const state = this.state.apply(transaction)\n    const selectionHasChanged = !this.state.selection.eq(state.selection)\n\n    this.view.updateState(state)\n    this.emit('transaction', {\n      editor: this,\n      transaction,\n    })\n\n    if (selectionHasChanged) {\n      this.emit('selectionUpdate', {\n        editor: this,\n        transaction,\n      })\n    }\n\n    const focus = transaction.getMeta('focus')\n    const blur = transaction.getMeta('blur')\n\n    if (focus) {\n      this.emit('focus', {\n        editor: this,\n        event: focus.event,\n        transaction,\n      })\n    }\n\n    if (blur) {\n      this.emit('blur', {\n        editor: this,\n        event: blur.event,\n        transaction,\n      })\n    }\n\n    if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\n      return\n    }\n\n    this.emit('update', {\n      editor: this,\n      transaction,\n    })\n  }\n\n  /**\n   * Get attributes of the currently selected node or mark.\n   */\n  public getAttributes(nameOrType: string | NodeType | MarkType): Record<string, any> {\n    return getAttributes(this.state, nameOrType)\n  }\n\n  /**\n   * Returns if the currently selected node or mark is active.\n   *\n   * @param name Name of the node or mark\n   * @param attributes Attributes of the node or mark\n   */\n  public isActive(name: string, attributes?: {}): boolean;\n  public isActive(attributes: {}): boolean;\n  public isActive(nameOrAttributes: string, attributesOrUndefined?: {}): boolean {\n    const name = typeof nameOrAttributes === 'string'\n      ? nameOrAttributes\n      : null\n\n    const attributes = typeof nameOrAttributes === 'string'\n      ? attributesOrUndefined\n      : nameOrAttributes\n\n    return isActive(this.state, name, attributes)\n  }\n\n  /**\n   * Get the document as JSON.\n   */\n  public getJSON(): JSONContent {\n    return this.state.doc.toJSON()\n  }\n\n  /**\n   * Get the document as HTML.\n   */\n  public getHTML(): string {\n    return getHTMLFromFragment(this.state.doc.content, this.schema)\n  }\n\n  /**\n   * Get the document as text.\n   */\n  public getText(options?: {\n    blockSeparator?: string,\n    textSerializers?: Record<string, TextSerializer>,\n  }): string {\n    const {\n      blockSeparator = '\\n\\n',\n      textSerializers = {},\n    } = options || {}\n\n    return getText(this.state.doc, {\n      blockSeparator,\n      textSerializers: {\n        ...textSerializers,\n        ...getTextSerializersFromSchema(this.schema),\n      },\n    })\n  }\n\n  /**\n   * Check if there is no content.\n   */\n  public get isEmpty(): boolean {\n    return isNodeEmpty(this.state.doc)\n  }\n\n  /**\n   * Get the number of characters for the current document.\n   *\n   * @deprecated\n   */\n  public getCharacterCount(): number {\n    console.warn('[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.')\n\n    return this.state.doc.content.size - 2\n  }\n\n  /**\n   * Destroy the editor.\n   */\n  public destroy(): void {\n    this.emit('destroy')\n\n    if (this.view) {\n      this.view.destroy()\n    }\n\n    this.removeAllListeners()\n  }\n\n  /**\n   * Check if the editor is already destroyed.\n   */\n  public get isDestroyed(): boolean {\n    // @ts-ignore\n    return !this.view?.docView\n  }\n\n}\n", "import { MarkType } from 'prosemirror-model'\n\nimport { getMarksBetween } from '../helpers/getMarksBetween'\nimport { InputRule, InputRuleFinder } from '../InputRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule that adds a mark when the\n * matched text is typed into it.\n */\nexport function markInputRule(config: {\n  find: InputRuleFinder,\n  type: MarkType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      const { tr } = state\n      const captureGroup = match[match.length - 1]\n      const fullMatch = match[0]\n      let markEnd = range.to\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/)\n        const textStart = range.from + fullMatch.indexOf(captureGroup)\n        const textEnd = textStart + captureGroup.length\n\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n          .filter(item => {\n            // @ts-ignore\n            const excluded = item.mark.type.excluded as MarkType[]\n\n            return excluded.find(type => type === config.type && type !== item.mark.type)\n          })\n          .filter(item => item.to > textStart)\n\n        if (excludedMarks.length) {\n          return null\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to)\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart)\n        }\n\n        markEnd = range.from + startSpaces + captureGroup.length\n\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}))\n\n        tr.removeStoredMark(config.type)\n      }\n    },\n  })\n}\n", "import { NodeType } from 'prosemirror-model'\n\nimport { InputRule, InputRuleFinder } from '../InputRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule that adds a node when the\n * matched text is typed into it.\n */\nexport function nodeInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n      const { tr } = state\n      const start = range.from\n      let end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n        let matchStart = start + offset\n\n        if (matchStart > end) {\n          matchStart = end\n        } else {\n          end = matchStart + match[1].length\n        }\n\n        // insert last typed character\n        const lastChar = match[0][match[0].length - 1]\n\n        tr.insertText(lastChar, start + match[0].length - 1)\n\n        // insert node from input rule\n        tr.replaceWith(matchStart, end, config.type.create(attributes))\n      } else if (match[0]) {\n        tr.replaceWith(start, end, config.type.create(attributes))\n      }\n    },\n  })\n}\n", "import { NodeType } from 'prosemirror-model'\n\nimport { InputRule, InputRuleFinder } from '../InputRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule that changes the type of a textblock when the\n * matched text is typed into it. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n */\nexport function textblockTypeInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const $start = state.doc.resolve(range.from)\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n\n      if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n        return null\n      }\n\n      state.tr\n        .delete(range.from, range.to)\n        .setBlockType(range.from, range.from, config.type, attributes)\n    },\n  })\n}\n", "import { InputRule, InputRuleFinder } from '../InputRule'\n\n/**\n * Build an input rule that replaces text when the\n * matched text is typed into it.\n */\nexport function textInputRule(config: {\n  find: InputRuleFinder,\n  replace: string,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      let insert = config.replace\n      let start = range.from\n      const end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n\n        insert += match[0].slice(offset + match[1].length)\n        start += offset\n\n        const cutOff = start - end\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert\n          start = end\n        }\n      }\n\n      state.tr.insertText(insert, start, end)\n    },\n  })\n}\n", "import { Node as ProseMirrorNode, NodeType } from 'prosemirror-model'\nimport { canJoin, findWrapping } from 'prosemirror-transform'\n\nimport { InputRule, InputRuleFinder } from '../InputRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an input rule for automatically wrapping a textblock when a\n * given string is typed. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n *\n * `type` is the type of node to wrap in.\n *\n * By default, if there’s a node with the same type above the newly\n * wrapped node, the rule will try to join those\n * two nodes. You can pass a join predicate, which takes a regular\n * expression match and the node before the wrapped node, and can\n * return a boolean to indicate whether a join should happen.\n */\nexport function wrappingInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n  joinPredicate?: (match: ExtendedRegExpMatchArray, node: ProseMirrorNode) => boolean,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n      const tr = state.tr.delete(range.from, range.to)\n      const $start = tr.doc.resolve(range.from)\n      const blockRange = $start.blockRange()\n      const wrapping = blockRange && findWrapping(blockRange, config.type, attributes)\n\n      if (!wrapping) {\n        return null\n      }\n\n      tr.wrap(blockRange, wrapping)\n\n      const before = tr.doc.resolve(range.from - 1).nodeBefore\n\n      if (\n        before\n        && before.type === config.type\n        && canJoin(tr.doc, range.from - 1)\n        && (!config.joinPredicate || config.joinPredicate(match, before))\n      ) {\n        tr.join(range.from - 1)\n      }\n    },\n  })\n}\n", "import {\n  DOMOutputSpec,\n  Mark as ProseMirrorMark,\n  MarkSpec,\n  MarkType,\n} from 'prosemirror-model'\nimport { Plugin, Transaction } from 'prosemirror-state'\n\nimport { MarkConfig } from '.'\nimport { Editor } from './Editor'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport { InputRule } from './InputRule'\nimport { Node } from './Node'\nimport { PasteRule } from './PasteRule'\nimport {\n  AnyConfig,\n  Attributes,\n  Extensions,\n  GlobalAttributes,\n  KeyboardShortcutCommand,\n  ParentConfig,\n  RawCommands,\n} from './types'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { mergeDeep } from './utilities/mergeDeep'\n\ndeclare module '@tiptap/core' {\n  export interface MarkConfig<Options = any, Storage = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Default Options\n     */\n    addOptions?: (this: {\n      name: string,\n      parent: Exclude<ParentConfig<MarkConfig<Options, Storage>>['addOptions'], undefined>,\n    }) => Options,\n\n    /**\n     * Default Storage\n     */\n    addStorage?: (this: {\n      name: string,\n      options: Options,\n      parent: Exclude<ParentConfig<MarkConfig<Options, Storage>>['addStorage'], undefined>,\n    }) => Storage,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addPasteRules'],\n    }) => PasteRule[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['extendMarkSchema'],\n      },\n      extension: Mark,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: MarkType,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: MarkType,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['onDestroy'],\n    }) => void) | null,\n\n    /**\n     * Keep mark after split node\n     */\n    keepOnSplit?: boolean | (() => boolean),\n\n    /**\n     * Inclusive\n     */\n    inclusive?: MarkSpec['inclusive'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['inclusive'],\n    }) => MarkSpec['inclusive']),\n\n    /**\n     * Excludes\n     */\n    excludes?: MarkSpec['excludes'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['excludes'],\n    }) => MarkSpec['excludes']),\n\n    /**\n     * Marks this Mark as exitable\n     */\n    exitable?: boolean | (() => boolean),\n\n    /**\n     * Group\n     */\n    group?: MarkSpec['group'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['group'],\n    }) => MarkSpec['group']),\n\n    /**\n     * Spanning\n     */\n    spanning?: MarkSpec['spanning'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['spanning'],\n    }) => MarkSpec['spanning']),\n\n    /**\n     * Code\n     */\n    code?: boolean | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<MarkConfig<Options, Storage>>['code'],\n    }) => boolean),\n\n    /**\n     * Parse HTML\n     */\n    parseHTML?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['parseHTML'],\n      },\n    ) => MarkSpec['parseDOM'],\n\n    /**\n     * Render HTML\n     */\n    renderHTML?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['renderHTML'],\n      },\n      props: {\n        mark: ProseMirrorMark,\n        HTMLAttributes: Record<string, any>,\n      },\n    ) => DOMOutputSpec) | null,\n\n    /**\n     * Attributes\n     */\n    addAttributes?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<MarkConfig<Options, Storage>>['addAttributes'],\n      },\n    ) => Attributes | {},\n  }\n}\n\nexport class Mark<Options = any, Storage = any> {\n  type = 'mark'\n\n  name = 'mark'\n\n  parent: Mark | null = null\n\n  child: Mark | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: MarkConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<MarkConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`)\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n        this,\n        'addOptions',\n        {\n          name: this.name,\n        },\n      ))\n    }\n\n    this.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      this,\n      'addStorage',\n      {\n        name: this.name,\n        options: this.options,\n      },\n    )) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<MarkConfig<O, S>> = {}) {\n    return new Mark<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(extendedConfig: Partial<MarkConfig<ExtendedOptions, ExtendedStorage>> = {}) {\n    const extension = new Mark<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`)\n    }\n\n    extension.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n      extension,\n      'addOptions',\n      {\n        name: extension.name,\n      },\n    ))\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  static handleExit({\n    editor,\n    mark,\n  }: {\n    editor: Editor\n    mark: Mark\n  }) {\n    const { tr } = editor.state\n    const currentPos = editor.state.selection.$from\n    const isAtEnd = currentPos.pos === currentPos.end()\n\n    if (isAtEnd) {\n      const currentMarks = currentPos.marks()\n      const isInMark = !!currentMarks.find(m => m?.type.name === mark.name)\n\n      if (!isInMark) {\n        return false\n      }\n\n      const removeMark = currentMarks.find(m => m?.type.name === mark.name)\n\n      if (removeMark) {\n        tr.removeStoredMark(removeMark)\n      }\n      tr.insertText(' ', currentPos.pos)\n\n      editor.view.dispatch(tr)\n\n      return true\n    }\n\n    return false\n  }\n}\n", "import {\n  DOMOutputSpec,\n  Node as ProseMirrorNode,\n  NodeSpec,\n  NodeType,\n} from 'prosemirror-model'\nimport { Plugin, Transaction } from 'prosemirror-state'\n\nimport { NodeConfig } from '.'\nimport { Editor } from './Editor'\nimport { getExtensionField } from './helpers/getExtensionField'\nimport { InputRule } from './InputRule'\nimport { PasteRule } from './PasteRule'\nimport {\n  AnyConfig,\n  Attributes,\n  Extensions,\n  GlobalAttributes,\n  KeyboardShortcutCommand,\n  NodeViewRenderer,\n  ParentConfig,\n  RawCommands,\n} from './types'\nimport { callOrReturn } from './utilities/callOrReturn'\nimport { mergeDeep } from './utilities/mergeDeep'\n\ndeclare module '@tiptap/core' {\n  interface NodeConfig<Options = any, Storage = any> {\n    [key: string]: any;\n\n    /**\n     * Name\n     */\n    name: string,\n\n    /**\n     * Priority\n     */\n    priority?: number,\n\n    /**\n     * Default options\n     */\n    defaultOptions?: Options,\n\n    /**\n     * Default Options\n     */\n    addOptions?: (this: {\n      name: string,\n      parent: Exclude<ParentConfig<NodeConfig<Options, Storage>>['addOptions'], undefined>,\n    }) => Options,\n\n    /**\n     * Default Storage\n     */\n    addStorage?: (this: {\n      name: string,\n      options: Options,\n      parent: Exclude<ParentConfig<NodeConfig<Options, Storage>>['addStorage'], undefined>,\n    }) => Storage,\n\n    /**\n     * Global attributes\n     */\n    addGlobalAttributes?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addGlobalAttributes'],\n    }) => GlobalAttributes | {},\n\n    /**\n     * Raw\n     */\n    addCommands?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addCommands'],\n    }) => Partial<RawCommands>,\n\n    /**\n     * Keyboard shortcuts\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addKeyboardShortcuts'],\n    }) => {\n      [key: string]: KeyboardShortcutCommand,\n    },\n\n    /**\n     * Input rules\n     */\n    addInputRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addInputRules'],\n    }) => InputRule[],\n\n    /**\n     * Paste rules\n     */\n    addPasteRules?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addPasteRules'],\n    }) => PasteRule[],\n\n    /**\n     * ProseMirror plugins\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addProseMirrorPlugins'],\n    }) => Plugin[],\n\n    /**\n     * Extensions\n     */\n    addExtensions?: (this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addExtensions'],\n    }) => Extensions,\n\n    /**\n     * Extend Node Schema\n     */\n    extendNodeSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['extendNodeSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * Extend Mark Schema\n     */\n    extendMarkSchema?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['extendMarkSchema'],\n      },\n      extension: Node,\n    ) => Record<string, any>) | null,\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onBeforeCreate'],\n    }) => void) | null,\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onCreate'],\n    }) => void) | null,\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onUpdate'],\n    }) => void) | null,\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onSelectionUpdate'],\n    }) => void) | null,\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['onTransaction'],\n      },\n      props: {\n        transaction: Transaction,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['onFocus'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        editor: Editor,\n        type: NodeType,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['onBlur'],\n      },\n      props: {\n        event: FocusEvent,\n      },\n    ) => void) | null,\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['onDestroy'],\n    }) => void) | null,\n\n    /**\n     * Node View\n     */\n    addNodeView?: ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      editor: Editor,\n      type: NodeType,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addNodeView'],\n    }) => NodeViewRenderer) | null,\n\n    /**\n     * TopNode\n     */\n    topNode?: boolean,\n\n    /**\n     * Content\n     */\n    content?: NodeSpec['content'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['content'],\n    }) => NodeSpec['content']),\n\n    /**\n     * Marks\n     */\n    marks?: NodeSpec['marks'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['marks'],\n    }) => NodeSpec['marks']),\n\n    /**\n     * Group\n     */\n    group?: NodeSpec['group'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['group'],\n    }) => NodeSpec['group']),\n\n    /**\n     * Inline\n     */\n    inline?: NodeSpec['inline'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['inline'],\n    }) => NodeSpec['inline']),\n\n    /**\n     * Atom\n     */\n    atom?: NodeSpec['atom'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['atom'],\n    }) => NodeSpec['atom']),\n\n    /**\n     * Selectable\n     */\n    selectable?: NodeSpec['selectable'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['selectable'],\n    }) => NodeSpec['selectable']),\n\n    /**\n     * Draggable\n     */\n    draggable?: NodeSpec['draggable'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['draggable'],\n    }) => NodeSpec['draggable']),\n\n    /**\n     * Code\n     */\n    code?: NodeSpec['code'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['code'],\n    }) => NodeSpec['code']),\n\n    /**\n     * Whitespace\n     */\n    whitespace?: NodeSpec['whitespace'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['whitespace'],\n    }) => NodeSpec['whitespace']),\n\n    /**\n     * Defining\n     */\n    defining?: NodeSpec['defining'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['defining'],\n    }) => NodeSpec['defining']),\n\n    /**\n     * Isolating\n     */\n    isolating?: NodeSpec['isolating'] | ((this: {\n      name: string,\n      options: Options,\n      storage: Storage,\n      parent: ParentConfig<NodeConfig<Options, Storage>>['isolating'],\n    }) => NodeSpec['isolating']),\n\n    /**\n     * Parse HTML\n     */\n    parseHTML?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['parseHTML'],\n      },\n    ) => NodeSpec['parseDOM'],\n\n    /**\n     * Render HTML\n     */\n    renderHTML?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['renderHTML'],\n      },\n      props: {\n        node: ProseMirrorNode,\n        HTMLAttributes: Record<string, any>,\n      }\n    ) => DOMOutputSpec) | null,\n\n    /**\n     * Render Text\n     */\n    renderText?: ((\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['renderText'],\n      },\n      props: {\n        node: ProseMirrorNode,\n        pos: number,\n        parent: ProseMirrorNode,\n        index: number,\n      }\n    ) => string) | null,\n\n    /**\n     * Add Attributes\n     */\n    addAttributes?: (\n      this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options, Storage>>['addAttributes'],\n      },\n    ) => Attributes | {},\n  }\n}\n\nexport class Node<Options = any, Storage = any> {\n  type = 'node'\n\n  name = 'node'\n\n  parent: Node | null = null\n\n  child: Node | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: NodeConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<NodeConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`)\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n        this,\n        'addOptions',\n        {\n          name: this.name,\n        },\n      ))\n    }\n\n    this.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      this,\n      'addStorage',\n      {\n        name: this.name,\n        options: this.options,\n      },\n    )) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<NodeConfig<O, S>> = {}) {\n    return new Node<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options, options) as Options\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(extendedConfig: Partial<NodeConfig<ExtendedOptions, ExtendedStorage>> = {}) {\n    const extension = new Node<ExtendedOptions, ExtendedStorage>(extendedConfig)\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name\n      ? extendedConfig.name\n      : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`)\n    }\n\n    extension.options = callOrReturn(getExtensionField<AnyConfig['addOptions']>(\n      extension,\n      'addOptions',\n      {\n        name: extension.name,\n      },\n    ))\n\n    extension.storage = callOrReturn(getExtensionField<AnyConfig['addStorage']>(\n      extension,\n      'addStorage',\n      {\n        name: extension.name,\n        options: extension.options,\n      },\n    ))\n\n    return extension\n  }\n}\n", "import { Node as ProseMirrorNode } from 'prosemirror-model'\nimport { NodeSelection } from 'prosemirror-state'\nimport { Decoration, NodeView as ProseMirrorNodeView } from 'prosemirror-view'\n\nimport { Editor as CoreEditor } from './Editor'\nimport { Node } from './Node'\nimport { NodeViewRendererOptions, NodeViewRendererProps } from './types'\nimport { isiOS } from './utilities/isiOS'\n\nexport class NodeView<\n  Component,\n  Editor extends CoreEditor = CoreEditor,\n  Options extends NodeViewRendererOptions = NodeViewRendererOptions,\n> implements ProseMirrorNodeView {\n\n  component: Component\n\n  editor: Editor\n\n  options: Options\n\n  extension: Node\n\n  node: ProseMirrorNode\n\n  decorations: Decoration[]\n\n  getPos: any\n\n  isDragging = false\n\n  constructor(component: Component, props: NodeViewRendererProps, options?: Partial<Options>) {\n    this.component = component\n    this.editor = props.editor as Editor\n    this.options = {\n      stopEvent: null,\n      ignoreMutation: null,\n      ...options,\n    } as Options\n    this.extension = props.extension\n    this.node = props.node\n    this.decorations = props.decorations\n    this.getPos = props.getPos\n    this.mount()\n  }\n\n  mount() {\n    // eslint-disable-next-line\n    return\n  }\n\n  get dom(): HTMLElement {\n    return this.editor.view.dom as HTMLElement\n  }\n\n  get contentDOM(): HTMLElement | null {\n    return null\n  }\n\n  onDragStart(event: DragEvent) {\n    const { view } = this.editor\n    const target = (event.target as HTMLElement)\n\n    // get the drag handle element\n    // `closest` is not available for text nodes so we may have to use its parent\n    const dragHandle = target.nodeType === 3\n      ? target.parentElement?.closest('[data-drag-handle]')\n      : target.closest('[data-drag-handle]')\n\n    if (\n      !this.dom\n      || this.contentDOM?.contains(target)\n      || !dragHandle\n    ) {\n      return\n    }\n\n    let x = 0\n    let y = 0\n\n    // calculate offset for drag element if we use a different drag handle element\n    if (this.dom !== dragHandle) {\n      const domBox = this.dom.getBoundingClientRect()\n      const handleBox = dragHandle.getBoundingClientRect()\n\n      // In React, we have to go through nativeEvent to reach offsetX/offsetY.\n      const offsetX = event.offsetX ?? (event as any).nativeEvent?.offsetX\n      const offsetY = event.offsetY ?? (event as any).nativeEvent?.offsetY\n\n      x = handleBox.x - domBox.x + offsetX\n      y = handleBox.y - domBox.y + offsetY\n    }\n\n    event.dataTransfer?.setDragImage(this.dom, x, y)\n\n    // we need to tell ProseMirror that we want to move the whole node\n    // so we create a NodeSelection\n    const selection = NodeSelection.create(view.state.doc, this.getPos())\n    const transaction = view.state.tr.setSelection(selection)\n\n    view.dispatch(transaction)\n  }\n\n  stopEvent(event: Event) {\n    if (!this.dom) {\n      return false\n    }\n\n    if (typeof this.options.stopEvent === 'function') {\n      return this.options.stopEvent({ event })\n    }\n\n    const target = (event.target as HTMLElement)\n    const isInElement = this.dom.contains(target) && !this.contentDOM?.contains(target)\n\n    // any event from child nodes should be handled by ProseMirror\n    if (!isInElement) {\n      return false\n    }\n\n    const isDropEvent = event.type === 'drop'\n    const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName)\n      || target.isContentEditable\n\n    // any input event within node views should be ignored by ProseMirror\n    if (isInput && !isDropEvent) {\n      return true\n    }\n\n    const { isEditable } = this.editor\n    const { isDragging } = this\n    const isDraggable = !!this.node.type.spec.draggable\n    const isSelectable = NodeSelection.isSelectable(this.node)\n    const isCopyEvent = event.type === 'copy'\n    const isPasteEvent = event.type === 'paste'\n    const isCutEvent = event.type === 'cut'\n    const isClickEvent = event.type === 'mousedown'\n    const isDragEvent = event.type.startsWith('drag')\n\n    // ProseMirror tries to drag selectable nodes\n    // even if `draggable` is set to `false`\n    // this fix prevents that\n    if (!isDraggable && isSelectable && isDragEvent) {\n      event.preventDefault()\n    }\n\n    if (isDraggable && isDragEvent && !isDragging) {\n      event.preventDefault()\n      return false\n    }\n\n    // we have to store that dragging started\n    if (isDraggable && isEditable && !isDragging && isClickEvent) {\n      const dragHandle = target.closest('[data-drag-handle]')\n      const isValidDragHandle = dragHandle\n        && (this.dom === dragHandle || (this.dom.contains(dragHandle)))\n\n      if (isValidDragHandle) {\n        this.isDragging = true\n\n        document.addEventListener('dragend', () => {\n          this.isDragging = false\n        }, { once: true })\n\n        document.addEventListener('mouseup', () => {\n          this.isDragging = false\n        }, { once: true })\n      }\n    }\n\n    // these events are handled by prosemirror\n    if (\n      isDragging\n      || isDropEvent\n      || isCopyEvent\n      || isPasteEvent\n      || isCutEvent\n      || (isClickEvent && isSelectable)\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  ignoreMutation(mutation: MutationRecord | { type: 'selection', target: Element }) {\n    if (!this.dom || !this.contentDOM) {\n      return true\n    }\n\n    if (typeof this.options.ignoreMutation === 'function') {\n      return this.options.ignoreMutation({ mutation })\n    }\n\n    // a leaf/atom node is like a black box for ProseMirror\n    // and should be fully handled by the node view\n    if (this.node.isLeaf || this.node.isAtom) {\n      return true\n    }\n\n    // ProseMirror should handle any selections\n    if (mutation.type === 'selection') {\n      return false\n    }\n\n    // try to prevent a bug on iOS that will break node views on enter\n    // this is because ProseMirror can’t preventDispatch on enter\n    // this will lead to a re-render of the node view on enter\n    // see: https://github.com/ueberdosis/tiptap/issues/1214\n    if (\n      this.dom.contains(mutation.target)\n      && mutation.type === 'childList'\n      && isiOS()\n      && this.editor.isFocused\n    ) {\n      const changedNodes = [\n        ...Array.from(mutation.addedNodes),\n        ...Array.from(mutation.removedNodes),\n      ] as HTMLElement[]\n\n      // we’ll check if every changed node is contentEditable\n      // to make sure it’s probably mutated by ProseMirror\n      if (changedNodes.every(node => node.isContentEditable)) {\n        return false\n      }\n    }\n\n    // we will allow mutation contentDOM with attributes\n    // so we can for example adding classes within our node view\n    if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\n      return true\n    }\n\n    // ProseMirror should handle any changes within contentDOM\n    if (this.contentDOM.contains(mutation.target)) {\n      return false\n    }\n\n    return true\n  }\n\n  updateAttributes(attributes: {}) {\n    this.editor.commands.command(({ tr }) => {\n      const pos = this.getPos()\n\n      tr.setNodeMarkup(pos, undefined, {\n        ...this.node.attrs,\n        ...attributes,\n      })\n\n      return true\n    })\n  }\n\n  deleteNode(): void {\n    const from = this.getPos()\n    const to = from + this.node.nodeSize\n\n    this.editor.commands.deleteRange({ from, to })\n  }\n}\n", "import { MarkType } from 'prosemirror-model'\n\nimport { getMarksBetween } from '../helpers/getMarksBetween'\nimport { PasteRule, PasteRuleFinder } from '../PasteRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities/callOrReturn'\n\n/**\n * Build an paste rule that adds a mark when the\n * matched text is pasted into it.\n */\nexport function markPasteRule(config: {\n  find: PasteRuleFinder,\n  type: MarkType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n  ,\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      const { tr } = state\n      const captureGroup = match[match.length - 1]\n      const fullMatch = match[0]\n      let markEnd = range.to\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/)\n        const textStart = range.from + fullMatch.indexOf(captureGroup)\n        const textEnd = textStart + captureGroup.length\n\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n          .filter(item => {\n            // @ts-ignore\n            const excluded = item.mark.type.excluded as MarkType[]\n\n            return excluded.find(type => type === config.type && type !== item.mark.type)\n          })\n          .filter(item => item.to > textStart)\n\n        if (excludedMarks.length) {\n          return null\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to)\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart)\n        }\n\n        markEnd = range.from + startSpaces + captureGroup.length\n\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}))\n\n        tr.removeStoredMark(config.type)\n      }\n    },\n  })\n}\n", "// source: https://stackoverflow.com/a/6969486\nexport function escapeForRegEx(string: string): string {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n}\n", "import { NodeType } from 'prosemirror-model'\n\nimport { PasteRule } from '../PasteRule'\nimport { ExtendedRegExpMatchArray } from '../types'\nimport { callOrReturn } from '../utilities'\n\n/**\n * Build an paste rule that adds a node when the\n * matched text is pasted into it.\n */\nexport function nodePasteRule(config: {\n  find: RegExp,\n  type: NodeType,\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null,\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler({ match, chain, range }) {\n      const attributes = callOrReturn(config.getAttributes, undefined, match)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      if (match.input) {\n        chain()\n          .deleteRange(range)\n          .insertContentAt(range.from, {\n            type: config.type.name,\n            attrs: attributes,\n          })\n      }\n    },\n  })\n}\n", "import { PasteRule, PasteRuleFinder } from '../PasteRule'\n\n/**\n * Build an paste rule that replaces text when the\n * matched text is pasted into it.\n */\nexport function textPasteRule(config: {\n  find: PasteRuleFinder,\n  replace: string,\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      let insert = config.replace\n      let start = range.from\n      const end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n\n        insert += match[0].slice(offset + match[1].length)\n        start += offset\n\n        const cutOff = start - end\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert\n          start = end\n        }\n      }\n\n      state.tr.insertText(insert, start, end)\n    },\n  })\n}\n", "import { Transaction } from 'prosemirror-state'\n\nexport interface TrackerResult {\n  position: number,\n  deleted: boolean,\n}\n\nexport class Tracker {\n\n  transaction: Transaction\n\n  currentStep: number\n\n  constructor(transaction: Transaction) {\n    this.transaction = transaction\n    this.currentStep = this.transaction.steps.length\n  }\n\n  map(position: number): TrackerResult {\n    let deleted = false\n\n    const mappedPosition = this.transaction.steps\n      .slice(this.currentStep)\n      .reduce((newPosition, step) => {\n        const mapResult = step\n          .getMap()\n          .mapResult(newPosition)\n\n        if (mapResult.deleted) {\n          deleted = true\n        }\n\n        return mapResult.pos\n      }, position)\n\n    return {\n      position: mappedPosition,\n      deleted,\n    }\n  }\n\n}\n"],
  "mappings": "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",
  "names": ["command", "run", "extensions", "_a", "commands", "range", "createParagraphNear", "originalCreateParagraphNear", "deleteSelection", "originalDeleteSelection", "exitCode", "originalExitCode", "joinBackward", "originalJoinBackward", "joinForward", "originalJoinForward", "lift", "isActive", "originalLift", "liftEmptyBlock", "originalLiftEmptyBlock", "liftListItem", "originalLiftListItem", "newlineInCode", "originalNewlineInCode", "selectNodeBackward", "originalSelectNodeBackward", "selectNodeForward", "originalSelectNodeForward", "selectParentNode", "originalSelectParentNode", "selectTextblockEnd", "originalSelectTextblockEnd", "selectTextblockStart", "originalSelectTextblockStart", "document", "Node", "node", "output", "sinkListItem", "originalSinkListItem", "first", "newNextTypeAttributes", "nextType", "wrapIn", "originalWrapIn", "wrapInList", "originalWrapInList", "style", "focus", "blur"]
}
